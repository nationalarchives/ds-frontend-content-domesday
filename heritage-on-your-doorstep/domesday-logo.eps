%!PS-Adobe-3.1 EPSF-3.0%%Title: DD Logo no url (cmyk).eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Paul Deacon%%CreationDate: 19/4/06%%BoundingBox: 0 0 762 398%%HiResBoundingBox: 0 0 761.8951 397.0503%%CropBox: 0 0 761.8951 397.0503%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: (PANTONE Black C)%%+ (PANTONE 485 C)%%CMYKCustomColor: 0 0.1300 0.4900 0.9800 (PANTONE Black C)%%+ 0 0.9500 1 0 (PANTONE 485 C)%%RGBCustomColor: %ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 68 8%%BeginData: 5380 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD32FFA8A8FD%7DFFA1F820A8FD7CFF27F8F827FD7BFFA7FD04F87CFD7AFF52FD05F8CAFD%78FFA7FD06F827FD78FF27FD07F8A7FD78FF27F87C27F8F8F851FD78FF7C%F8FFFF27F8F8F8CAFD22FF7D27CFFD52FF51F8A7FF7DF8F8F827FD21FFA8%F8F8FD27FFA8FD2BFF7CF8CAFFFF51F8F827A8FD17FFCFFD05FFCFFFFFA7%F827FD0EFFCFFFFFFF76A8FD12FF7CA8FD2BFF51F8A8FFFFA8F8F8F87CFD%07FF7C272752FD09FF7D52F87DFFFFFFA7267CFFFF7DF826A751274BFD05%FFA751F8F8F8A7FFFF27F8F8FD0BFF762651FFFFFF5251FD06FF7C2651FD%23FF7CF8CFFFFFFF51F8F826FD06FF51FD04F827FD06FF52FD04F87CFFA7%4BF8F8A7FFFFA8FD06F827FFFFFF5127275127A7FFFF27F8F8F851FD08FF%A826F8F8FFFFFFA726A8FD05FFA827F8F87DFD22FF51F8A7FFFFFF7DF8F8%F87DFFFFFFCF27F8A852F8F8F87DFFFFFFA7F8F87C26F8F87C51FD04F87C%FFFF26F8F8275151F8F8A8FF26F8A7FD05FFA827FD04F8A1FD06FF7CF8F8%F827FFFFFF51F8FD06FF52F8F8F8A7FD22FF7CF8CFFD04FF27F8F876FFFF%FF4BF8CFFFFF51F8F87CFFFFA82727FFFF7DFD04F87DA7F8F8F8FFCF51F8%52FFFFFFA827FF7DF851FD07FFA72726F8F851FD05FFA751FF51F851FFFF%FFF827FD06FF52F8F827FD23FF51F8A7FD04FF7DF8F826FFFF52F8A7FFFF%FFCFF8F826FFFF27F8FFFFFF7CF8F8F8A7FFFF7DF8F852FF7CF852FD06FF%51F827FD07FFA8F8A826F8F8A1FD04FFA8FFFF51F87CFFFFA8F8F8FD06FF%A1F8F87CFD23FF7CF8A8FD04FFA827F826FFCAF852FD05FF51F827FFA7F8%7DFFFFFF7CF8F852FD04FF27F851FF7DF87CFD06FF51F8F827A8FD05FFA7%F8A8A8F8F826FD07FF26F87DFFFFA7F826A8FD05FF7DF826FD24FF4BF8A7%FD05FF27F8F8CF27F8A8FD05FF76F8F8FF26F8A8FFFFFF51F8F8A8FD04FF%51F8F8FF7CF8277C4B27207CFFCAFD04F852FD04FFA8F8A8FF51F8F87CFD%05FF52F8F8A7FFFFA1F8F87DFD05FF76F8A1FD24FF52F8CAFD05FFA1F826%A72727FD06FFCAF8267D2727FD04FF52F827CFFD04FFA7F827FFA1F8F8F8%2751A1FD04FF51F8F8F826A8FFFFA826A8FFA8F8F851FD04FF76F8F8F8A7%FFFFFFF8F84BFD05FF2727FD25FF51F8A8FD05FFA8F8F8A7F84BFD06FFA8%F8207DF852FD04FF27F8F8FD05FFA7F8F8FF7CF827CFFD08FFA74BF8F8F8%A8FFA7F8A8FFFF4BF8F8FFFFFF52207CF8F8A7FFFFFF51F8F8A8FFFFFFA7%F87CFD25FF7CF8A8FD06FFF8277DF8F8FD06FFA8F85276F851FD04FF51F8%27FD06FFF827FF7DF87DFD0BFF7CF8F84BFF7DF8A8FFFFCFF8F8A7FF7DF8%A8FFF8F876FFFFFF7CF8F876FFFFFF52F8FD26FF51F87DFD05FFA8F851CA%F8F87CFD05FF52F87D76F827FD04FF26F820FD05FFA8F827FF52F851FD05%FF7DFD06FF27F827FFA1F8A8FFFFFF27F8A8A8F87DFFA8F8F84BFD04FFF8%F8F8A8FFFFF87CFD26FF7CF8A7FD05FF4BF8FFFF27F827FD05FF2026FF51%F8F8A7FFFFFF51F827FD05FFA8F87DFF7CF87CFD04FF5127FD06FF27F87C%FF7D27CAFFFFFF27F8A82751FFFFFF26F8F8CFFFFFFF7DF8F851FF7627FD%27FF4BF827A17C7D7627F8A8FFFF52F8F827A8FFA827F8A8FF52F8F8F852%FFFF27F8F8A8FD04FF76F8A8FF27F851FF7D7CF8F87DFD05FF51F827FFFF%7DF8FD04FFF8277CF851FFFF52F8F8F826FF7C52FF27F8F87D277CFD24FF%A127FD08F826FD05FF27F8F8F826F8F8A7FFFF7CF8F8F876FFFF4BF8F827%FD04FF5127FFFF27FD06F8A1FF7C7C5276F8277DFFA727F8F8277C5127F8%FF51F8F827F8F82727F8F8F851A8FF7CF8F8F826FD24FF51FD08F8277CFD%07FF5126F8F827A8FD04FF27F851FFFFFF51F826A8FD04FFF8A8FFFF5227%F8F82052A8A8FD05F852A8FFA7FD06F8274BA8FFA8F8F8F82676FFA87651%7DFD04FF26F8F87CFD23FF764BA1FFA8CAA1A7A7FD0DFFA8FD13FF5251FD%04FFCFFFCAFFFFFFCAA87DA8A7FD04FF5252CFFD0AFF7DA8FD0BFFCAF827%FD23FFA776FD10FFCAFFCACAC3C9C3C9C2C3C2C3BCC2BCC2BBBCBBBBBBBC%B5B5924B8CFCFCB5FCFCFCB4FCB4FCB5B4B5B5BBB5BBBBBB99BBBBC2BCC2%BBC2C9FD11FFA1F87CFD28FFFD04CAC3C2BBBCB5BBB5BBB4B5FCB4FCFCFC%B4FD10FC8C4B8CFCFCB4FCB4FD0BFCB4FCFCFCB4FD07FCB4BBC2C2C3C3C9%C9CFCAFFCFFD06FF27F8FD22FFC9C39ABCB5B5FCB4FD17FCB4FCB492B5B5%BB93BCBBC29951A0C9A7CACAFFCACAC9CAA1C9C3C9A1CACAFFCAFFCAFFCA%FFCAFFCACAC9CAA7C9C2C39AC2BCC299C2BBC299C2BCC2A0A1F87CFD20FF%C3FCB4FD05FCB4FCFCFCB4FD07FCB5FCB5B5BCBBBCBCC3C2C9C3CACAFD0A%FFA7A8FD29FFCFFFCACAC3C92627C2C2BCC3C3CFFD1BFFBBFD0CFCB4B4BB%BCC3C2C9CAFD47FF52F876FFCACAC2C2BBBBBBC2C2CAFD16FFCAFCFCFCB4%B4BBBBC2C2CAC9CFCFFD4DFFCFF8F8FD07FFCFCAC2C2B4B5C3FD15FFCAA0%C3CAFD56FF76F852FD0CFFA0FD70FFF8F87DFD7CFFA7F8F8A1FD7DFFF8F8%7CFD7DFF7CF8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FD38FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (DD Logo no url \(cmyk\).eps) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about='uuid:9b6f22dc-cfa6-11da-b9a1-000d933c9a4e'
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:9b6f22dc-cfa6-11da-b9a1-000d933c9a4e'
  xmlns:photoshop='http://ns.adobe.com/photoshop/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:9b6f22dc-cfa6-11da-b9a1-000d933c9a4e'
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:9b6f22dc-cfa6-11da-b9a1-000d933c9a4e'
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
  <xap:CreateDate>2006-04-13T14:58:37+01:00</xap:CreateDate>
  <xap:ModifyDate>2006-04-19T13:25:48Z</xap:ModifyDate>
  <xap:MetadataDate>2006-04-18T17:54:59+01:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>136</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAiAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYqwrzz+cXkHyPqun6X5j1A2t3qI9SNVjeQRxcuAll4A8ELAgH2PhgJTTMYJ4LiCOeCRZoJlE&#xA;kUsZDI6MKqysNiCNwRhQqYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYqo3d3bWdpNeXUqwWttG008zniiRoCzMxPQKBU4q/Or84PPZ88fmHq3mBKiyl&#xA;kEOnodqW0A9OLY9C4HNh4k5EJfQn/OIX5sSX9lL5A1aYvc2KG40SVzUtbj+8t9/99E8k/wAknsuI&#xA;2KvpfJIdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VS7zBoGk+YdGu9F1eE3Gm3yendQCSSIulQePOJkcdN6NiQr46/L78ivL3nHzb+ZPln1Xsp9Au5IN&#xA;DukZmWMx3M8QWRGLF0IjUGp5e+Q3S8xt380flj+Ykbyx/Vtd8u3gMkVTxfj1XkOsc0Tde6th5hX6&#xA;J+Xde0/zBoVhrenSepY6jAlxA3fjItaHwZehHY4QbQmOFXYq7FXYq7FXYq7FUk85eb9F8oeW73zD&#xA;rUpjsLFAzhByd2YhUjRdqs7EAfjQYCVQf5a+eIfPPkrTvNMNo1jFqPr8bV3EjJ6FxJBuwCg8vSr0&#xA;xCsnwq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXzt/wA48f8Ak6fzd/7ak3/U&#xA;ddZHqlJv+czfy+VrfTPPVlFR4yNO1YqOqtVraU0/lPJCT4qMeRVNv+cNPPDah5W1LyjdSFp9GlFz&#xA;Yhj/AMetyTzVR4RzAk/6+I5q958x+Y9F8t6Lda1rV0lnptmnOed/uCqBuzMdlUbk4SUPmjz3/wA5&#xA;E/nR+jk82eXfLv6I8izSelY395AJpZhWiyS/FSNX/ZovGuwdsjd9UvTf+cfvzyb8ytOvbXU7aKz8&#xA;waWEa4SAn0p4pKgSxoxLLxYcWWp6g13oJAq9F81+bfL3lTRJ9a1+8Sy0+32aR6ksx+ykairO7U2V&#xA;RXEmkPn3z5/zlX5ztNIj1Ty95MuLDRLx/SsNe1mOX05iwLL6ccfBKlVLD96w2Phgu00nP5T/APOQ&#xA;VnbflZc+ZvzF1tZtRfUbmK1t0SMXEsaJEyxwwRBKgM5+I7DucAK0xiy/5yr17zb+ZGgaJpSxeW/L&#xA;l1qEMNzczKlxdTRs4HBmcGOIS/Z+EErWvLE2rM/+cwdW0yD8r10yW6jTULy9ge1tCw9WRIiS7KnX&#xA;itRU9MMuYUPGPJ/56fm5o3kLTNC8neXaaXpMbiXUxaT3bOzSvLIxZQsSLVztxJ98jfml75/zjv8A&#xA;nZffmNpWpW2tW8dtrmjtH9YeBSkMsMvII4VixVw0bBx06EeAkChRv/zn81+bNZ1DQfyj0i31VtMI&#xA;j1HzFqEnp2MTsSoESAq8v2WowPavErvg4j0Wl/kTQP8AnJKXzStz518z2lvoFuyyPY2FvaSG5Ox9&#xA;IO0CyRp/M3Ll2XryBFq8/wD+cn/z380aTq0nkny59a0ZoQkl/q68oZpuSh1S1kUhljFficGpPw7A&#xA;Hk3as5/5xh/Ny587eVZdJ1q5Nx5k0WiyzSH95cWrn91M38zKfgc/IndsR3KXtWSQ85/Nr88PK/5d&#xA;WbLOj6nrbIHi0m3NGVCQBJcSUYQxliACQST9kHekTJNMP/5x4/Mvz/8AmVrmva5rF7HaaDp4jgtN&#xA;DtoIxGZZuTc2uHVpj6aJ050Jau1KFHNWQfmL54ur38xPL35W6PO9tcavW81++ibhJFp8SvI0ETr8&#xA;SSTiIjkN1BFOtQJb7KHqNtbwW1vFbQII4IEWOKMdFRBxUD5AZMBDwn/nJf8APbWfIkunaB5Ykji1&#xA;y6T63d3MkayiG25FI1VXBXlIyt1GwHvURKWdfkV5/wBX89/l3aa9rECQ6gZpreZoQVil9J6CRFJY&#xA;rUGh3+0D2wgqXoOFDsVdirsVdirsVdirsVfOn/OOkiSfnL+bciMGR9TlZWG4IN9ckEZHql7f538r&#xA;Wnmvyjq3l27A9LUrZ4Q7CoSQisUlPGOQKw+WEhAfGH/OMl3faB+etjpdyDBLcC90y+jaoIZInk4E&#xA;f8ZoFGDuKXq968n55fnPcaLLI3/KvfJD8rmFCQl5dBzH8dDv6jI4U/77VqULYOavoHV/Lmj6r5eu&#xA;fL13bIdJurdrN7VFCqsRXgAgAovEfZp0oKZKtkPjj/nHi31Hyh/zkZ/hmZ6Py1HSrs9A6wRvMp+T&#xA;PbKRgCXpOhyRfnV+eepXOoD635E8j/BYWLbwT3TMUWSRejCRo3ff9lVUihODmqa/85nPEn5WaahU&#xA;Fm1mAR7040tbkkgd9tvpyRQxD/nEz8nNB1PTJPPWv2iXsi3DQ6LbTDlEno053BQ/C7czxSv2eJPW&#xA;hA5pS3/nLv8AK/TNBvdN856FbJYw6hKbXUooFEcYugDLFMoWlGkVX5U7rXqTjSpj+dmsW3m3/nGr&#xA;yl5uvIIZtalnt7aW/KIZuSLNFchXpyVZJYOTKDg7lesfl1+Z35Z6L+WnlS0v/M2lWlzBpFhHcWjX&#xA;cHrRy/VULq8QYurcq1qOuSsKtvz5R8y+SfPupflgYLjXdZtJIr68tI5F+sXAgcIoZgqGXg7UK9Ga&#xA;p3OQsG6S+fv+cbfzt0X8vLjUPL/ma2e307UbhZG1BELPbTIvpss0YHMpQfs7qexrtLzQ+zNK1bS9&#xA;XsIdQ0u7ivbG4XlDcwOskbD2ZSRhBQ8M/PDy9pevfnh+W+l6rbpcadfRX0NzEa1dVTlxPgPAjf5b&#xA;ZCXP5Mg8EkTXvyJ/OsEc5LexmqpOwvNLuDT2FSn0LIvthQ+8dPv7TUbC21CzkE1neRJcW0y9HjlU&#xA;OjD5qa5MFDyj8+B5P8o/lR5sZY4La/8AMpcH1KyT3d3O4NauS7ekpJUVpGo+GgAGQISEm/5w20yO&#xA;2/K27vaD1b/VJnLd+EUUUar9BVj9OEcypYHZ+YBB/wA5pzT6kfSWS5fT4Sx2Baw9C3A/124/8Fg8&#xA;/NX1pk0Pkf8A5yw0GXzH+cPlfQdIj9XXNQsIrfj+yFe5lEZYitAvxsx7LvkSd0vpzyT5UsPKXlPS&#xA;/LlgS1tpsCwiQ7F33aSQjxeRmY/PCAhPMKuxV2KuxV2KuxV2KuxV83/845ejbfnT+a1klaLfz+nX&#xA;f4Ir6ddz/shkORCX0hk0PklvLqxf85Z+YbvRF9aPSbe71icJU8LiTTtwSvf63cD9WVyOzIJh/wA4&#xA;S63p4/xRozsF1KU297GD9qSFOcbkf8Y2da/62SHND6mySHxvqLi4/wCcgvzC836Uv+i+VLHUbwyp&#xA;9j63FYmzQchX4jcsW/2J8MrPJkzf/nCV7Q+VPMiLT64L+Izb7+mYf3dR/rB8kOaF3/ObM7L5Q8uw&#xA;UHGTUJHJ71SEgf8AE8TzV6B/zjPbrB+SHllV35pdSMaU3e8mb8K0whSln/OWNtBN+S+pSSU521zZ&#xA;yw1rXmZ1jNKDrxkbrgPRQ8f8720mn/8AOHfky3uQUkn1ISRinVZ5L24T742rjzV6x+Uf5BflND5Q&#xA;0HXpdFTVL/UrC1vZZtSJuF5XEKSkCA/uAAW2+CvucQO9beu20ej6VHa6dbLb2EUhaOys4wkKsyqZ&#xA;GWKNeIJCqzEKOgJw7BDz/wDM7/nHzyB5+Mt7c250zXnG2r2YCuzAbGeP7EvuTRqbBhjSbfMnlLVf&#xA;PX5JfnBH5amuWmsXu4INQs0JNtd21wVCTIh2EgR6qeoYcTtUZEnql7t+Z8zn/nI/8sIT9hIrx18a&#xA;ujg/8QGA8/l96hR/5y5/L+HXPIS+Z7dQNS8uNzduhktJmVJU/wBg3Fx7cvHJHvQF/wCSn5laV5e/&#xA;5xzsNf8AMM5W30g3FmneSZkmf0IYl/aYqyoPACp2BOAGlpgH5weSvNOsfllq/wCZvnkuuuTm1XRd&#xA;DXkIdKsZrmMcWG376QMA5PjvvsoAPNLPP+cN9Wt7r8r7rT1YfWNO1KYSR/tcJkSRHPsx5AfLJDmU&#xA;F5b/AM5aeWNR8t/mbp/nbTi0SaosM0dyg/u76x4r9/BY2Fepr4Y+SvqT8ufO9h508k6Z5ltmVRdw&#xA;g3cQP9zcJ8M8Z/1XBpXqKHvhBUvLPyYsv8c/mj5q/Ni6BewhmbR/K4PT0YgEedfnHTx3d/DIx3Kl&#xA;7zk0OxV2KuxV2KuxV2KuxV4R+ZX/ADlp5P8ALF9NpWgWp8xahASk80cois43G3EShZDIR34Cn+V4&#xA;Ru+SafOHk/8APLzD5U8+eYfOOn2FrLdeYpLiS5tJ/VaKP6zcfWDw4MjfC2wr2xpXr/ln8+f+chfz&#xA;CV7Dyn5bsbcy/A+tCKb0LevVjLNI0PIU6FWPgpOCyr2v8p/ypsPIenXMsty2qeZdWf19c1qWpeeU&#xA;ktxWpJCKWPuTufAEBSXzD+Yn5defPyZ/MT/F3lSCR9CWd7jT7yNDJDHHJUvaXSJ9lQCV3oGXcHlW&#xA;g96s3tv+covzD882P+HvJHlFk8z3KcJb+OYzxW4b4TMFaNFj8Q0j8VP82JJVnvlP8ipPLf5NeY/L&#xA;QmW780+Y7O4bUL0H4XuniYQxB23McbNSp6ks21aBrZbfOn/OPUX5p2P5mJpflcS2bmVI/Mkc8XKC&#xA;O2hkrJ9YVx8LD4glCGqaA74k9yvYP+c2YpW8qeXJVRjEl9KruAeKlovhBPQV4mmE8wo5Mv8A+cV7&#xA;vzM/5WWlhrOkyafbaezppd3L8LXcMsjzcxEQGVU9TiG6N2xiVKj/AM5Npd65ovlzyDpr/wC5TzVq&#xA;0UfGhPG1tgXmmYD9mJmRj7A4yUMT/wCcutF1Cz/L3yromi2E8uiabMRK8KM6QLa24htxJxFBVHeh&#xA;PgcB2pWI+UP+co/PkfljR/Kflbykmoalptlb2Ec9ZrtpPQQRq/1eBIiKqo25n54SfNWSaV5jm8i+&#xA;YLfz9+d2sS3Hm+5t2j0HyxaIkklnazEq87RoUijLUZB8XStSzbLFLJIv+cvfKWqP9R8s+Wtc1bWp&#xA;drOxEMCiRvdoprhwPcRnJkopJE8h3Ona7cfnZ+dd1DaS2bRT6f5etAJPTkSi2sTEGjuhA4opO/xM&#xA;1AwyCWBa1/zkrpOr/m75Y87TaFPBp/l6G5ge1EySzSi4iljDiqoqlfUBpU/PDR5oZ/5y/Oq+/NXy&#xA;jf8Ak/yL5R1ie91hYoHvrqKOO2gjLq8jPIryIBxHEFmXrX2KTa084/OHRvNH5Yv+X2jPF9b0Py/H&#xA;HqCOQTaXWqm5a4ulY9wBxRQRXhv3OCksv1382/PX556RL5J8oeUhaWN80Y1bVLuVpoYUjkWVSZAk&#xA;aRkMgb9pjT4VrhsoYj+VNr+d35T+ebm1g8nX+qQ3g+r31ikcgt5xGf3csV2iSRLwLfbNRQkGldm1&#xA;e+ecPy686fmB+Wms2nm420Gu3fG70LSbXi0OnzW6sYozcHeWSbkUlf7O/wAI23aPNXy1+W/nzzxo&#xA;una5+WukxOLrzXLHp8MchZHtLqSQQTsFpUF4qo/8tAe2J70vufyV5U07yl5U0zy5p4/0bToFiD0o&#xA;ZH+1JKw8ZHLMfnkgGKd4VdirsVdirsVdirsVYj551LQL3R5dJn8y2ujx3TKl/IJ41uGtSf30UR5h&#xA;keRfg5gEqCSN6EY+TUYxzlH5udg7N1OT6Mc5e6JSHTPO/wCR3lbTxp2kS2dpaohj9G0tpX5qQKhn&#xA;WNuZbuWbfvlB7QwDr9hdnj9l+0J8sZHvMR95QV1+av5Kq/rixjuZ68uSaevOopT4pFTf6cqPaWAd&#xA;D8nKh7HdoHmIj3yH6LUrj/nI/wApxAJZ6XeyKoAAcQxAAbbBXk2yEu14DlE/j5ubj9hNSfqnAe7i&#xA;P6AhpP8AnJbSgv7rQ52au4aZFFPmFbIfywP5v2/sb4+wWXrlj8igZv8AnJmYn9x5eVRU7vdFqjts&#xA;IVpkD2wekftciHsAOub/AGH/AB5L4v8AnI3VoQywaFZxKxLEKzgFj3NKVOV/ytk7ouR/oCw/6rL5&#xA;BZ/0Ml5r/wCrZYfdN/1Uwfyvl7o/b+ts/wBAem/n5P8AY/qWp/zkP5+lqYdM091B/ZhuWp8yJsf5&#xA;Xy90ft/Wk+xGhjznk/00f+JVh+c35uzyN6OjRnvwjsrhqD6XY4/ylnJ2H2NZ9luyojfKfjOP6lmp&#xA;fm1+c1rZi6utLNhbEhVnewlQO7miInqV5ux2VV3J6A5L81qpVQr/ADWjJ2N2JiiZSy8VdBkBPyju&#xA;ldppn5+33mZPN1xY3C62lsbWzaWG1X6vauxcxhHHAOxb4yBX9mpAqbMmTU2BEHbrXP8AY4Og0/ZF&#xA;SnnMRxfTDikeEeZHOR6710DKJbj/AJyajiAZDWv20XTHb5ELy2+jEy1o/EXLjD2dJ5/9NULLqf8A&#xA;zkrGAWScg7fDb2Dn7lQ5A5dYO/5D9TdHB7PH+b/psn61Ga4/P3UVWG+0lb0JuPrdlZMOv+WoX7sj&#xA;4mrPQ/6UfqYz0nYA34gPdKf7U00lfz60/lJYeW9Ot1lHxrGllBXw5BJY2+/LoHWDcAf7Fwp6fsDl&#xA;4k/9n/xBUtd0r86dfnspdb8p6ZqI09nktIblreSFZHAUuYWuTGzAD4WZSVqaUrkidYf4R9n62v8A&#xA;K9gf6rk+Uv8AqmmtvrX5/afarDF5V01YU2RI/TAHsEiugAPoyQy6uI+gfj3Fj+R7Ckds+QfP9ONM&#xA;dG86fm/HdV13ygstl+0bBlSVfcLJNIH+W2ShqtQD6obeTj6rsrsox/caip/0+X2RFfayG6822t5D&#xA;9W1Dyvq0kEgDNFNYpOlR2YI8grmQdX3wn/pXUfyT3ZsJ/wA+vvAV7Tzl5et4I4Vsr+whX4Yon0u+&#xA;iQd9uMHAZMaqAG4lH/NP6mEuyM3SWOXuy4/+KVB+YfkwU9XVYreu/wDpIe370/3aqd8A12E/xI/k&#xA;TV9MZl/VqX3Wix5v8qNbS3KazZSQQo0sskdxE4VEBZmPFjsApOWjUYzykPm4uXQ58f145x98SPve&#xA;FfkF5es/O35jeZ/zfuLFLa0kvJLby/bhAg5cQstyw/34YyoLd3Z+4yYcYvozJodirsVdirsVdirs&#xA;VYD+dPlfWfMPlAQ6Qry3drcLO1sjUMsYVkZQKgEjkGA9vHNf2lglkx+ncgvTeynaGLS6q8u0ZRq+&#xA;47H9jwjTvyl/MS/k4R6JPFTq9xxgUfTIVr9GaKGizS5RP3fe+k5/aXQYxZyxP9X1fcySz/5x188T&#xA;UM9zY2y9w0kjt9yRkfjmTHsrKedB1OX240cfpjkl8B+kptbf840akz0uddhjTxigaQ/czx/ry2PY&#xA;8+sg4OT2+xgenET75V+gsgsP+cb/ACnEo+u6je3Mn/FZihT/AIEpIf8AhsyIdkQ6yJ+z9bq83t3q&#xA;j9EIRHnZ/SPuTiy/Ib8uLdSJrOa8P809xKD/AMkTFl0Oy8I52fj+qnBy+2PaEuUox90R/vrTe1/K&#xA;n8u7YUj0K2b/AIyhpf8Ak4z+GWjQYR/D97gZPaPXz55ZfDb7qTC38i+S7YUh0HT0r1P1aIn7ypOW&#xA;DSYh/DH5ONPtfVz55cn+ml+tH2+iaNbEG2sLaEgUBjhjSg69gMmMEByiPk409Xln9U5H3ko3LXHd&#xA;iqGudN0+6uLW5ubaOe4snaSzlkQM0TspRnjJ+yxUlajscFKicKuxV2KuxV2KuxV2KuxV2KuxV2Kv&#xA;m/8A5yo8yW8k2j/lx5etLdvMXmGWH6zKsaCRIpJBFBEJAKqZpPtb/ZG+zZScULuht5OQNTl4THil&#xA;wnpZp6z5Z/KLyloXl3TdJt4pY57C3jie+tZ57WSSVR8cx9GRPid6t9OQlpISPEfq7wS5GDtTNijw&#xA;AgwHSUYyH+yBRzeT9at99K806hAf993ghvo/+SqCT/kpkPysx9M5fH1OQO08Mv73BjP9XigfsNf7&#xA;FDXD/mtp0bNGmla7HGNkUS2Vw/y5NLDX6RkT+Zj/ADZfYf1N0B2ZlNE5cJPunEf7mX3p55a1XVdU&#xA;01bvUtKk0iZztaSyLI9B3PELT6d8vwZJTjco8LrtfpseHJw48gyjvAoJtl7hOxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kvk/zf5Z8zL/AM5haTdS2zXVvfXN&#xA;pfWUhFU+qW8CpK22y+iYm+mh/ayBZPrDJsXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWqCte/jireKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//Z</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:9b6f22dc-cfa6-11da-b9a1-000d933c9a4e'
  xmlns:stRef='http://ns.adobe.com/xap/1.0/sType/ResourceRef#'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:512B4C13CC9011DA9495E9BB204555F1</xapMM:DocumentID>
  <xapMM:InstanceID>uuid:126e7a3a-cefc-11da-bc51-001124420d5a</xapMM:InstanceID>
  <xapMM:DerivedFrom rdf:parseType='Resource'>
   <stRef:instanceID>uuid:a60b12b4-cac2-11da-ba37-001124389abe</stRef:instanceID>
   <stRef:documentID>uuid:B0BB346BCC5B11DAB48FD7B8F2344C16</stRef:documentID>
  </xapMM:DerivedFrom>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:9b6f22dc-cfa6-11da-b9a1-000d933c9a4e'
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
  <dc:title>
   <rdf:Alt>
    <rdf:li xml:lang='x-default'>Domes jamie</rdf:li>
   </rdf:Alt>
  </dc:title>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -397.051 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 397.051 li761.896 397.051 li761.896 0 liclp[1 0 0 1 0 0 ] concat87.9717 279.484 mo92.0435 278.188 101.521 277.349 106.711 276.716 cv111.9 276.083 116.877 275.107 123.705 275.01 cv131.422 274.899 142.73 272.868 145.337 272.452 cv147.945 272.036 155.705 269.989 161.718 269.989 cv166.577 269.989 172.503 269.542 173.571 269.217 cv176.5 268.325 184.461 267.25 188.133 267.199 cv191.805 267.147 196.495 266.921 198.489 266.447 cv200.483 265.975 204.681 265.501 211.391 265.329 cv218.103 265.157 221.303 265.043 225.017 264.453 cv228.509 263.898 246.79 263.276 250.529 262.892 cv254.267 262.507 259.363 261.856 264.18 261.574 cv268.995 261.292 297.454 259.743 303.913 259.46 cv310.371 259.176 350.746 256.423 357.447 255.911 cv364.149 255.4 397.329 256.876 400.247 256.825 cv403.165 256.773 404.942 257.354 407.624 257.354 cv410.306 257.354 433.786 255.712 439.61 255.716 cv445.437 255.718 483.266 255.637 488.468 255.841 cv493.669 256.046 503.53 256.206 510.119 256.287 cv516.708 256.368 563.293 258.956 572.27 259.636 cv585.819 260.661 622.517 264.702 634.361 266.839 cv643.948 268.569 678.808 275.549 684.161 277.05 cv689.515 278.55 691.628 281.48 693.274 281.48 cv694.921 281.48 701.755 278.694 700.323 276.123 cv698.89 273.552 695.724 275.272 694.161 275.276 cv692.599 275.28 688.971 273.165 687.198 273.165 cv685.426 273.165 681.196 272.579 678.741 272.011 cv676.285 271.441 645.933 265.632 634.136 264.015 cv623.194 262.515 591.202 258.113 572.393 257.188 cv567.966 256.972 533.024 253.798 528.327 253.798 cv523.63 253.798 520.263 252.942 516.081 250.057 cv511.897 247.171 509.091 247.817 503.538 247.538 cv497.985 247.261 462.77 246.634 452.521 246.528 cv442.272 246.424 412.267 244.661 405.307 244.649 cv398.347 244.638 367.838 244.862 363.542 244.782 cv359.247 244.701 348.339 243.688 344.205 243.82 cv340.07 243.951 330.245 246.14 327.968 246.163 cv325.691 246.187 286.578 247.128 282.027 247.272 cv277.477 247.415 225.059 248.842 218.389 249.093 cv211.718 249.344 180.249 251.664 177.59 251.738 cv174.932 251.813 165.183 251.815 162.527 251.816 cv159.87 251.818 150.252 253.428 148.324 253.428 cv146.395 253.428 143.457 253.401 140.776 254.084 cv137.656 254.88 128.228 255.507 123.162 255.507 cv118.097 255.507 105.567 256.917 101.541 257.455 cv97.5137 257.993 85.2994 259.753 81.502 260.306 cv77.9839 260.818 67.6719 262.521 64.2334 263.358 cv60.795 264.195 62.4732 269.574 63.1758 272.268 cv64.6065 277.749 68.0367 285.829 87.9717 279.484 cvfalse sop/0 <</Name (PANTONE 485 C)/0 [/DeviceCMYK] add_csa/CSA /0 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /Components [ 0 0.95 1 0 ] >>add_csd1 /0 get_csdsepcs1 sepf459.024 220.453 mo457.602 222.877 454.72 224.695 451.804 226.608 cv450.548 227.434 447.626 228.865 445.472 229.268 cv442.937 229.741 432.927 230.433 430.181 229.893 cv427.435 229.354 424.713 229.753 423.964 230.121 cv423.622 230.291 421.296 231.417 420.013 232.175 cv418.73 232.933 415.241 235.545 414.436 235.975 cv413.63 236.404 413.082 237.536 414.003 237.689 cv414.923 237.843 415.276 237.903 416.097 238.037 cv422.612 239.107 434.583 240.584 441.588 238.089 cv447.64 235.931 453.126 232.594 458.434 229.365 cv464.151 225.957 li472.968 220.954 476.738 210.689 472.733 202.591 cv469.513 196.009 463.413 192.736 457.515 189.56 cv456.499 189.013 449.981 185.109 448.487 184.111 cv444.929 181.734 440.849 179.124 438.679 175.805 cv437.905 174.554 437.513 173.151 437.513 171.544 cv437.513 169.557 437.974 167.198 439.304 164.565 cv440.073 163.045 442.368 160.214 445.581 159.303 cv448.792 158.392 453.099 157.656 457.72 158.061 cv458.366 158.117 459.6 158.14 458.905 158.833 cv457.825 159.913 460.821 160.642 463.54 158.412 cv464.252 157.828 466.388 155.658 467.854 154.689 cv469.323 153.721 475.566 149.558 471.233 149.308 cv466.9 149.058 464.243 149.048 462.95 149.141 cv461.657 149.233 453.388 149.965 447.829 152.442 cv442.271 154.921 433.116 158.036 426.54 169.699 cv425.363 171.785 424.688 174.234 424.688 176.825 cv424.688 180.005 425.653 183.051 427.409 185.41 cv431.89 191.115 437.675 194.057 443.271 196.902 cv448.612 199.618 454.038 202.035 457.564 206.967 cv459.77 210.051 460.584 212.442 460.584 215.309 cv460.584 218.23 459.456 219.719 459.024 220.453 cv/1 <</Name (PANTONE Black C)/CSA /0 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /Components [ 0 0.13 0.49 0.98 ] >>add_csd1 /1 get_csdsepcs1 sepf673.962 161.432 mo673.767 162.735 673.73 163.473 673.156 164.535 cv673.056 164.723 672.806 165.35 672.741 165.703 cv672.424 167.669 671.53 169.353 670.722 171.239 cv670.034 172.92 669.784 173.535 669.69 173.781 cv669.554 174.129 668.653 175.427 668.656 175.419 cv667.999 176.424 667.315 177.462 666.927 178.407 cv662.03 186.501 658.017 195.078 654.143 203.367 cv648.839 214.512 li648.413 215.402 647.592 217.58 647.053 218.541 cv646.514 219.502 644.583 223.352 643.845 224.652 cv641.806 228.246 640.25 232.046 638.804 235.772 cv637.542 239.018 634.099 243.931 632.372 247.083 cv632.372 247.083 631.239 249.334 631.243 249.325 cv630.72 250.327 629.085 253.313 628.596 254.291 cv628.106 255.27 627.833 256.501 626.616 259.005 cv624.468 263.425 622.208 267.977 620.183 272.594 cv619.437 274.295 617.733 277.039 617.038 278.916 cv616.343 280.794 614.251 287.142 614.251 292.889 cv614.251 295.324 615.065 297.677 615.065 300.065 cv615.065 300.755 614.949 301.52 614.157 302.837 cv613.364 304.155 612.737 306 612.386 306.877 cv612.034 307.755 608.849 311.989 605.902 307.262 cv602.956 302.534 600.97 300.771 600.97 295.011 cv600.97 288.785 604.396 282.653 607.399 277.231 cv608.257 275.683 611.657 269.769 612.444 268.429 cv613.909 265.935 615.343 263.307 617.089 260.772 cv626.163 243.296 li620.698 236.25 616.587 227.846 612.872 220.158 cv612.513 219.414 608.065 210.483 607.543 209.42 cv602.702 199.59 602.632 197.004 600.937 190.244 cv600.417 188.17 600.163 185.982 600.163 183.555 cv600.163 179.718 600.798 175.854 601.423 172.101 cv601.54 171.402 602.608 166.709 604.149 163.376 cv605.21 161.08 605.448 159.748 605.794 159.094 cv606.969 156.879 609.981 153.633 611.757 151.193 cv613.532 148.752 617.7 145.828 618.581 145.166 cv619.462 144.505 619.087 143.555 620.715 144.043 cv622.343 144.531 621.528 145.187 621.124 145.591 cv620.72 145.996 618.866 147.136 618.493 147.507 cv614.155 151.846 612.778 158.953 612.122 162.265 cv611.466 165.579 611.656 173.168 611.656 175.206 cv611.656 177.244 612.288 178.736 612.388 180.168 cv612.597 181.391 li614.245 188.143 616.804 194.885 620.885 203.235 cv622.468 206.832 624.532 210.808 627.179 215.348 cv628.238 217.464 629.487 219.607 630.73 221.74 cv631.856 223.676 633.917 227.268 634.839 229.248 cv635.302 228.51 639.14 220.746 639.644 219.707 cv640.502 217.939 642.585 213.285 643.925 210.929 cv645.263 208.573 645.72 205.832 646.085 204.854 cv646.452 203.875 649.883 196.459 650.923 192.958 cv651.964 189.457 653.634 180.584 653.72 178.242 cv653.639 176.092 li653.562 173.261 652.796 170.771 652.056 168.349 cv651.928 167.93 651.466 166.39 651.466 165.847 cv651.466 164.548 651.991 163.05 652.704 162.03 cv653.241 161.259 653.476 159.855 654.29 158.743 cv654.886 157.93 655.718 156.14 658.379 152.558 cv661.042 148.977 665.005 149.771 666.202 150.333 cv667.399 150.895 670.335 151.207 671.847 152.719 cv673.356 154.23 674.255 157.478 674.187 159.274 cv674.171 159.655 674.03 160.97 673.962 161.432 cv1 /1 get_csdsepcs1 sepf549.97 209.166 mo554.267 203.613 560.314 198.025 565.63 192.853 cv565.046 201.246 564.648 213.607 567.335 221.259 cv565.677 222.57 559.46 226.598 557.035 227.74 cv554.683 228.851 550.419 229.184 547.772 227.125 cv546.661 226.26 546.097 225.553 545.388 224.637 cv544.197 223.094 543.78 221.067 543.78 219.85 cv543.78 217.962 544.853 216.192 545.703 214.795 cv546.636 213.425 549.406 209.895 549.97 209.166 cv585.333 153.077 mo586.019 152.392 588.312 150.244 587.413 149.345 cv586.514 148.447 582.649 148.091 580.458 149.5 cv578.267 150.909 575.411 152.557 574.642 152.887 cv573.874 153.216 570.799 154.63 568.378 156.152 cv568.37 156.156 564.286 158.722 564.286 158.722 cv562.898 159.662 561.505 161.004 560.012 162.161 cv557.618 164.001 555.157 165.896 553.399 167.812 cv553.127 168.227 552.616 168.662 552.071 169.123 cv551.817 169.337 550.921 170.129 550.804 170.391 cv550.687 170.652 550.651 170.769 550.685 171.03 cv550.719 171.29 550.812 171.686 550.823 171.815 cv550.845 172.063 550.995 172.085 551.13 172.419 cv551.265 172.754 551.511 172.764 551.651 172.653 cv553.007 171.591 554.372 170.399 555.493 169.46 cv556.398 168.703 558.53 167.147 559.565 166.592 cv560.427 166.13 561.814 164.082 563.511 164.421 cv563.844 164.504 564.083 164.406 564.558 164.704 cv565.032 165.001 567.304 166.31 567.69 169.438 cv568.079 172.566 567.98 172.547 567.98 172.674 cv567.98 172.8 567.934 173.47 567.893 173.833 cv567.852 174.194 567.515 176.958 567.46 177.637 cv567.364 178.843 566.585 184.486 566.585 184.486 cv564.853 186.013 563.755 187.112 563.077 187.79 cv562.399 188.467 561.733 189.804 560.87 190.576 cv560.007 191.349 557.249 193.597 556.634 194.213 cv556.019 194.829 554.129 197.023 553.263 197.905 cv553.249 197.92 550.978 200.232 550.883 200.327 cv550.046 201.164 549.458 202.198 548.823 202.873 cv548.179 203.562 547.513 204.27 546.974 205.115 cv546.956 205.139 545.205 207.197 545.205 207.197 cv540.987 212.137 536.628 217.239 533.8 222.668 cv533.046 224.116 532.04 226.276 532.04 228.32 cv532.04 229.332 532.29 230.232 532.784 230.994 cv535.108 234.998 540.172 239.679 546.216 239.212 cv553.591 238.642 562.938 235.707 570.554 227.422 cv572.98 230.996 576.892 234.884 583.929 235.205 cv587.898 235.386 591.377 233.914 594.562 232.355 cv597.714 230.832 600.028 228.688 602.478 226.416 cv604.341 224.707 li605.261 223.785 607.638 220.872 606.892 220.029 cv606.146 219.188 605.579 220.223 605.087 220.563 cv604.596 220.904 599.712 224.656 598.707 225.206 cv597.282 225.987 595.341 226.836 594.383 227.007 cv593.425 227.178 592.268 227.211 591.462 226.77 cv590.655 226.327 588.099 224.621 586.985 223.104 cv579.722 213.203 578.439 201.418 578.439 190.969 cv578.457 188.607 li578.503 182.693 579.5 176.968 580.461 171.431 cv581.204 167.157 581.868 162.737 582.288 158.291 cv582.599 155.001 583.2 155.211 585.333 153.077 cv1 /1 get_csdsepcs1 sepf493.995 228.095 mo493.995 228.095 493.833 222.563 493.778 220.663 cv493.722 218.764 494.164 213.115 494.179 212.111 cv494.19 211.213 494.151 210.306 494.118 209.387 cv494.06 206.51 li494.06 206.494 494.357 192.818 494.357 192.818 cv494.46 185.239 494.565 177.461 495.093 170.355 cv495.243 168.104 li498.974 169.755 504.488 181.447 507.231 185.837 cv512.294 193.941 516.052 201.223 519.573 210.209 cv520.737 213.178 520.392 218.121 519.937 219.396 cv519.599 220.344 518.688 224.877 517.812 226.378 cv517.265 227.313 517.589 228.001 514.96 228.641 cv512.331 229.281 505.755 229.528 503.677 229.447 cv501.599 229.367 495.022 228.34 493.995 228.095 cv478.067 227.927 mo476.13 228.893 473.492 230.426 471.646 233.136 cv469.8 235.845 466.136 241.207 465.62 241.972 cv465.104 242.735 463.556 244.686 465.104 244.686 cv466.653 244.686 468.073 242.512 468.603 242.092 cv469.13 241.672 470.462 241.031 472.55 240.182 cv474.638 239.333 478.306 238.42 481.157 238.206 cv485.153 237.906 489.077 237.76 492.878 237.673 cv498.814 237.537 504.417 237.409 510.321 236.325 cv519.776 234.407 527.165 228.111 529.142 220.29 cv530.073 217.684 530.577 214.09 530.577 210.121 cv530.577 206.593 530.163 201.083 528.21 194.912 cv525.251 185.55 519.64 176.04 514.212 166.84 cv511.221 161.768 508.156 156.574 505.526 151.415 cv503.493 148.109 501.431 146.578 499.325 146.175 cv494.388 145.23 487.868 156.02 483.099 158.904 cv481.897 159.63 479.3 163.367 486.726 165.515 cv487.644 168.371 487.329 175.483 487.329 179.449 cv487.329 179.941 487.417 184.167 487.417 184.92 cv487.417 184.929 487.573 190.297 487.573 190.297 cv487.573 194.332 487.344 198.398 487.118 202.328 cv486.897 206.285 486.663 210.375 486.663 214.443 cv486.694 216.118 486.933 220.285 486.933 220.951 cv486.933 222.093 486.435 223.723 486.632 226.459 cv486.62 226.922 li480.71 226.859 479.003 227.461 478.067 227.927 cv1 /1 get_csdsepcs1 sepf416.187 168.634 mo415.423 170.066 416.032 170.8 413.804 172.292 cv411.577 173.783 410.663 168.245 407.917 166.267 cv405.173 164.289 401.586 164.154 400.218 163.916 cv399.239 163.745 398.581 163.662 398.05 163.662 cv393.45 163.662 388.042 165.019 384.397 166.32 cv383.804 168.678 383.544 175.833 383.302 183.111 cv383.267 184.191 383.129 188.27 383.129 188.598 cv383.129 188.598 397.501 187.392 397.503 187.392 cv406.108 186.605 li407.589 186.469 413.21 185.948 413.778 185.875 cv414.347 185.802 416.334 185.557 416.007 186.562 cv415.679 187.566 413.569 188.229 413.165 188.749 cv412.804 189.214 410.265 191.368 408.79 191.837 cv407.731 192.174 404.054 192.523 402.788 192.852 cv401.522 193.18 398.323 194.092 397.868 194.189 cv394.923 194.824 392.142 195.419 389.235 196.773 cv389.235 196.773 387.771 197.387 387.763 197.393 cv383.032 199.162 li383.101 202.902 li383.233 210.375 383.474 218.838 384.522 226.144 cv394.228 226.947 403.525 223.793 410.786 219.918 cv411.166 219.715 412.327 219.324 412.76 219.1 cv415.386 217.691 416.284 216.59 418.019 214.604 cv419.003 213.476 419.937 212.658 420.808 211.785 cv421.153 211.439 422.183 210.947 422.294 213.202 cv422.415 215.649 421.292 218.078 420.208 220.045 cv418.104 223.859 412.489 228.381 411.772 228.995 cv410.73 229.89 408.834 231.002 407.235 232.002 cv399.187 237.039 389.364 238.776 380.629 237.323 cv380.629 237.323 379.08 236.982 379.077 236.98 cv375.524 236.221 371.25 235.477 369.956 232.465 cv369.708 231.888 369.689 231.167 369.689 230.496 cv369.689 228.828 370.175 227.183 370.694 225.437 cv371.228 223.623 371.781 221.746 371.781 219.759 cv371.781 217.441 372.644 212.391 372.706 211.121 cv372.823 208.73 372.746 207.162 372.817 205.356 cv372.889 203.551 373.189 194.506 373.23 193.027 cv373.271 191.548 373.42 184.17 373.436 183.231 cv373.45 182.292 373.398 171.598 373.514 170.905 cv373.574 170.159 li373.574 170.159 371.188 169.565 371.18 169.565 cv371.077 169.565 370.027 169.293 368.721 168.844 cv367.416 168.396 367.343 167.398 367.988 166.023 cv368.633 164.649 372.522 162.495 373.649 161.864 cv374.138 158.756 374.229 152.926 374.205 151.523 cv374.188 150.604 374.229 144.775 374.205 142.551 cv374.181 140.326 375.773 138.987 376.195 138.565 cv376.616 138.144 380.771 133.791 381.967 132.595 cv383.163 131.399 384.731 130.947 385.417 131.631 cv386.346 132.56 386.81 133.894 386.81 135.721 cv386.81 135.721 386.718 137.268 386.714 137.286 cv386.714 137.286 386.298 143.506 386.296 143.512 cv386.003 145.677 385.089 152.992 385.089 155.707 cv385.675 155.367 387.559 154.74 388.25 154.4 cv389.792 153.61 391.247 152.877 392.546 152.566 cv392.835 152.497 394.726 152.086 395.487 151.84 cv396.251 151.594 397.21 151.043 399.212 150.734 cv400.241 150.577 407.104 150.179 410.544 152.998 cv412.569 154.656 417.052 159.366 417.052 164.708 cv417.052 166.141 416.55 167.951 416.187 168.634 cv1 /1 get_csdsepcs1 sepf237.586 219.413 mo233.742 224.446 228.882 227.299 223.896 227.453 cv212.057 227.748 205.085 214.281 202.637 208.477 cv201.28 205.307 200.592 201.843 200.592 198.162 cv200.592 191.773 202.938 184.718 206.468 179.033 cv207.381 177.562 211.83 171.914 212.805 170.766 cv213.78 169.618 219 164.221 219.789 163.215 cv220.577 162.208 221.945 161.03 222.865 160.815 cv227.449 159.748 230.837 163.452 233.187 166.629 cv238.515 173.832 242.584 185.492 244.108 197.268 cv244.429 205.096 242.232 212.532 237.586 219.413 cv247.045 156.448 mo245.984 154.645 242.466 152.322 239.912 151.577 cv237.359 150.832 228.817 149.687 224.401 152.229 cv219.984 154.77 215.111 158.954 214.235 159.772 cv213.361 160.588 211.692 162.103 210.864 163.096 cv210.535 163.49 209.95 164.076 209.677 164.273 cv209.405 164.47 208.932 164.88 208.696 165.035 cv208.292 165.3 206.777 167.071 206.027 168.016 cv205.825 168.271 205.607 168.542 205.284 168.968 cv204.537 169.635 li204.078 170.04 203.092 170.868 202.807 171.311 cv202.2 172.251 201.456 173.784 201.192 174.048 cv200.714 174.526 199.097 176.507 198.306 177.738 cv198.296 177.753 196.326 180.812 196.326 180.812 cv195.2 182.339 193.812 185.235 193.423 186.081 cv193.034 186.927 192.386 189.272 192.152 189.973 cv191.919 190.673 191.452 191.283 191.272 191.894 cv191.092 192.504 190.481 195.29 190.382 195.997 cv190.25 196.955 190.188 198.512 190.023 199.098 cv189.859 199.684 189.356 200.996 189.356 202.355 cv189.356 203.012 189.331 204.275 189.34 205.062 cv189.477 217.797 195.771 229.359 206.125 235.234 cv207.971 236.314 210.266 236.886 212.467 237.341 cv212.829 237.42 214.047 237.822 214.362 237.873 cv218.677 238.564 222.775 238.649 227.033 236.898 cv227.079 236.88 227.445 236.74 227.445 236.74 cv233.409 233.39 240.165 229.591 244.4 223.472 cv249.809 215.508 253.232 208.185 254.849 201.076 cv255.427 199.49 255.584 198.019 255.746 196.465 cv255.749 196.463 255.976 194.547 255.976 194.547 cv255.976 194.532 li255.976 194.324 256 192.211 256 192.211 cv256 177.876 252.684 166.028 247.045 156.448 cv1 /1 get_csdsepcs1 sepf173.713 207.165 mo173.713 208.841 173.234 210.568 173.106 211.076 cv172.784 212.35 170.882 215.308 170.556 215.819 cv167.897 219.991 163.678 222.434 160.228 223.49 cv156.243 224.852 151.995 224.538 147.88 224.236 cv145.977 224.095 144.2 223.964 142.496 224 cv133.376 224.183 li132.886 223.692 132.716 222.05 132.692 221.337 cv132.424 213.338 131.326 205.788 131.326 197.721 cv131.326 197.717 131.368 193.563 131.368 193.563 cv131.368 193.56 131.428 170.912 131.428 170.912 cv131.515 158.245 li131.515 158.245 131.368 150.823 131.368 149.545 cv131.368 149.541 131.219 137.844 131.219 137.844 cv131.219 133.606 131.287 129.76 131.428 126.085 cv131.488 124.584 li132.738 124.584 135.914 126.105 137.06 126.987 cv138.849 128.365 142.508 131.891 143.778 133.372 cv144.546 134.267 146.592 137.154 147.164 138.053 cv147.736 138.952 150.599 143.733 151.687 145.914 cv153.977 150.503 156.079 155.25 158.067 159.862 cv159.638 163.503 161.244 167.242 162.974 170.839 cv165.432 177.19 167.977 183.983 170.055 190.806 cv171.197 194.556 li172.49 198.666 173.713 202.676 173.713 207.165 cv134.033 87.9698 mo134.033 87.9698 li130.484 89.2789 127.382 94.8965 125.377 103.092 cv124.938 104.89 123.318 107.614 122.167 109.773 cv122.167 109.778 120.696 112.588 120.696 112.588 cv120.032 114.011 119.352 114.669 118.959 115.18 cv118.566 115.689 117.538 116.933 117.331 117.175 cv115.733 119.048 114.217 120.813 114.217 122.921 cv114.217 122.921 114.021 123.76 114.629 124.226 cv114.813 124.366 115.251 124.557 115.55 124.8 cv115.85 125.043 116.289 124.987 117.063 124.824 cv117.836 124.659 118.749 124.142 119.136 123.933 cv119.954 123.489 121.967 123.675 121.908 125.644 cv121.898 125.98 121.858 127.404 121.869 127.614 cv122.103 131.793 122.078 135.01 122.078 138.506 cv122.06 146.072 li122.06 150.687 122.108 155.634 122.449 160.547 cv122.449 160.551 li122.449 160.762 122.227 172.845 122.095 180.052 cv122.093 180.118 122.015 187.899 122.015 187.899 cv122.015 187.905 121.955 195.4 121.967 195.63 cv121.981 195.917 122.067 199.008 122.081 199.635 cv122.188 204.528 li122.302 208.797 122.422 213.212 122.422 217.638 cv122.422 217.649 122.334 223.855 122.334 223.855 cv122.334 223.863 122.302 224.901 122.302 224.901 cv120.036 225.279 li119.405 225.395 118.453 225.363 117.411 225.592 cv114.611 226.207 111.843 227.078 109.29 228.284 cv103.827 230.856 98.5093 234.885 94.7012 239.329 cv94.4361 239.664 93.7608 240.567 93.4146 241.014 cv91.9556 242.894 90.3526 244.783 89.251 246.835 cv88.9605 247.378 88.7554 247.876 88.4756 248.283 cv88.3086 248.528 87.6851 249.653 87.6851 249.794 cv87.6851 250.077 88.961 250.515 89.0811 250.342 cv89.3892 249.894 90.0166 249.12 90.1871 248.914 cv90.3584 248.708 91.063 247.668 91.2193 247.424 cv92.002 246.196 92.8399 245.05 94.1368 244.279 cv94.2027 244.227 94.8819 243.663 94.8819 243.663 cv96.4097 242.402 98.4122 241.1 100.606 240.074 cv101.577 239.62 104.027 238.891 104.788 238.772 cv105.453 238.668 107.06 238.201 107.864 238.136 cv108.67 238.069 113.268 237.808 114.627 237.947 cv115.985 238.088 117.684 238.212 118.414 238.212 cv119.153 238.212 120.207 238.439 121.613 238.626 cv123.02 238.812 124.835 238.875 125.734 238.905 cv126.633 238.936 128.783 239.182 129.498 239.219 cv130.213 239.256 132.699 239.369 133.211 239.369 cv133.724 239.369 135.839 239.15 137.145 239.089 cv155.596 238.216 169.195 227.705 178.054 217.233 cv186.491 205.908 186.208 182.97 181.103 168.223 cv178.267 160.035 174.85 151.303 170.948 142.264 cv170.039 140.158 165.625 130.871 165.25 130.168 cv164.875 129.465 162.885 125.175 162.494 124.304 cv158.647 115.749 153.803 108.077 148.82 100.262 cv147.824 98.7002 145.54 95.92 144.955 95.0455 cv143.453 92.7999 141.914 90.4752 139.543 88.9258 cv137.551 87.6812 135.691 87.358 134.033 87.9698 cv1 /1 get_csdsepcs1 sepf354.109 229.958 mo350.135 239.513 343.341 248.646 334.097 257.195 cv332.496 258.845 330.58 260.349 328.726 261.809 cv328.726 261.809 325.126 264.831 324.922 264.944 cv324.188 265.352 323.761 265.09 323.1 265.003 cv322.438 264.915 323.774 263.423 324.12 263.069 cv324.465 262.716 325.539 261.692 326.425 261.201 cv327.781 260.449 328.859 259.334 329.861 258.197 cv333.375 254.21 338.016 249.678 341.299 245.072 cv341.468 244.836 341.711 244.468 341.819 244.244 cv342.338 243.188 342.61 242.17 343.437 241.125 cv344.263 240.081 347.172 232.722 347.758 230.953 cv348.343 229.187 350.422 219.163 350.678 217.199 cv350.935 215.234 351.217 209.207 351.23 207.75 cv351.3 199.939 350.038 192.222 347.863 185.459 cv347.711 184.987 346.834 181.972 345.939 179.69 cv345.044 177.409 343.283 174.629 342.936 174.08 cv342.587 173.532 342.113 172.666 340.648 170.92 cv339.183 169.175 336.32 167.634 334.914 167.132 cv333.562 166.649 331.925 167.132 331.374 167.266 cv328.453 167.976 326.325 170.287 324.281 172.53 cv324.281 172.53 321.834 175.059 321.808 175.088 cv315.226 183.294 314.92 193.995 314.619 204.344 cv314.545 206.998 314.462 209.742 314.27 212.364 cv314.231 212.904 li314.231 213.586 314.577 213.893 314.5 216.873 cv314.5 216.921 li314.504 217.543 314.519 220.539 314.816 222.311 cv315.113 224.081 315.258 225.871 316.935 226.828 cv318.61 227.785 320.77 227.233 321.092 228.334 cv321.413 229.434 320.57 230.298 319.554 230.983 cv318.539 231.67 317.47 232.522 316.751 233.565 cv316.033 234.609 314.987 234.375 313.139 235.588 cv312.638 235.916 312.298 236.207 311.762 236.422 cv311.762 236.422 310.456 237.023 310.443 237.028 cv309.593 237.439 308.858 237.788 307.785 237.979 cv305.972 238.525 304.156 238.342 302.062 237.311 cv299.828 236.209 299.228 233.285 299.228 230.226 cv299.361 225.361 li299.361 225.361 299.315 223.966 299.315 223.963 cv299.544 219.23 299.605 214.623 299.666 210.117 cv299.764 203.061 299.854 196.391 300.562 189.43 cv300.62 187.104 300.799 186.166 300.992 183.647 cv301.228 180.637 301.465 177.52 301.465 174.349 cv301.465 172.428 301.364 170.953 301.223 169.471 cv301.102 168.208 301.223 167.272 301.223 166.191 cv301.223 165.11 300.641 163.536 300.163 163.131 cv299.5 162.572 298.22 162.643 297.596 162.436 cv297.015 162.242 296.006 162.224 295.115 162.362 cv294.224 162.5 293.229 163.225 292.188 163.408 cv291.146 163.591 290.697 163.883 289.974 164.233 cv282.499 168.43 277.211 174.735 273.817 186.33 cv272.125 191.259 271.23 196.65 271.23 201.92 cv271.23 206.666 272.277 212.471 273.391 215.062 cv274.712 218.135 277.838 221.674 282.042 221.674 cv282.864 221.674 284.336 222.337 283.942 223.918 cv282.731 228.782 279.729 232.421 275.481 235.771 cv271.912 238.586 268.543 238.422 265.934 236.816 cv261.243 233.015 258.781 227.077 258.393 218.672 cv258.348 216.108 li258.348 207.016 260.13 197.877 263.803 187.331 cv264.19 186.22 265.784 182.898 267.527 179.461 cv269.27 176.023 272.846 171.105 274.835 168.627 cv276.826 166.15 278.991 164.356 279.811 163.748 cv280.448 163.275 285.133 159.998 285.744 159.601 cv290.198 156.706 295.238 155.275 300.158 153.944 cv301.801 153.499 308.325 151.604 310.415 150.588 cv312.505 149.574 316.08 146.064 317.408 149.941 cv317.906 151.393 317.759 152.781 317.564 154.409 cv317.345 157.267 317.363 157.312 317.353 157.385 cv317.171 158.707 317.387 160.047 317.282 161.341 cv317.156 162.963 317.024 164.638 317.366 166.311 cv317.633 167.603 li317.633 167.603 327.6 161.703 327.841 161.561 cv328.081 161.417 329.581 160.605 330.109 160.044 cv330.637 159.483 334.959 157.539 336.008 156.969 cv337.056 156.399 344.486 152.535 345.367 152.082 cv346.247 151.629 349.248 150.077 351.568 149.122 cv353.889 148.166 354.678 149.477 354.678 150.114 cv354.678 151.044 354.04 151.952 353.309 153.019 cv352.872 153.657 351.453 155.486 351.453 158.097 cv351.453 160.92 352.991 163.318 354.483 165.647 cv355.312 166.933 356.093 168.147 356.644 169.502 cv360.644 176.904 362.847 186.252 362.847 195.826 cv362.847 201.763 361.978 207.684 360.351 212.91 cv360.054 213.584 359.927 214.274 359.806 214.942 cv359.747 215.265 359.54 216.172 359.42 216.446 cv359.3 216.72 359.168 216.791 358.997 217.401 cv357.383 223.132 355.51 226.591 354.109 229.958 cv1 /1 get_csdsepcs1 sepf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (Paul Deacon) (55 Design Ltd)%%Title: (DD Logo no url \(spot\).eps)%%CreationDate: 19/4/06 2:25 pm%AI9_DataStream%Gb!R&kC39=dP,ubJ9rDmFGP8e%9&dgOG*6u90trQAad=(&+?ou)9Kn<fN8^U]_e6!qQ2"K=W39sCIX?'d]Iu);JU`W>Q78a"^Zl^%[A^5X;2&'qZ.MA0ZJ,!F8][>M@E4&F8NQL0'9X\5n;*TrAQaQHZE8/^;/Q$tSQ<;Tm:KPp<i;FG`/I(ZeZ@<%AujB/p7c;R_`%%M%FL^`S5H;gRq3s8a2TtcBV4+S(bLOaD"2=3_([<OHql8B9!Ee/gP]oiil$%KVL,EI_-#]:gcHgN.8X#p;<Tpp[[&%3dDq^X?]g$['%R>c/`/tpHc*rbXJ"2>%VE="l1FOU?sF^kCO[JjBU]W?S3]"LkD=)0[c=6X`5eOI/Wlr=@dAK@umPlr]_C:`F#B_;U(P.nRU,]lW+%U:_m"<*>%J*%++3/4NW7`tnN%ZRs^WeZ/XE7Ses(>-liGIaT7Xf?/2rN)&iAp-5c!R`$R1%G$=+$`^;Tmk=S2C?N02lVZ^^LH6I6%ZrO*VJOg!?R.VY@&4c`[Xl&Uim8,3S5,pagYu\Q!Lk,:\l`7@@j.uHG[Gsr"hQAaEXW%=c>`\sY]V\2E*XGZjGo=%VL#kgM6'2EV%$OWGh"0>YSo)o2fc@Fs6B_F84lrY=MlF^'mW&9dO,"LZI+=4Pr:9EO&Rjpf`qL^=JTt10SmJeWbJ:Lt0g9anS^(rp0NDd)b""`to%(0.`?#4n^C)Of>gY6b"XC0^D(qO_HtT,s.W#QI1(Ijtg)e91\Wak3_iLqc@j^D038<YXf-VMS*tV\B;].11N%'^VYEfLo(8diMH>%Z&c%t+!(@>e%1RQF<,_e?hb:]AMVmgPJJV&)>khF_*4`QhjUF:i7"Q[hjYs@L-eSmV=;hLl*pG`rOjUK@e^U`iL96`p;/]?/#D.^%MXW"e_%kp)>do\!qCJcUJ)Vh\&cT_2.%]YD\0Cj-lc.i7MJL'h.5pGgfF-;b5I$8`@[k%q#W]jY`?N86rhN?<PuHlqlkD?=4$miR%OkkZh_d9i:r.uZG*Mfa5hpEI^hq/=gBC@On$@N]ALHk;BY)_p7rhPWc$i\(N\3Bg^GEGc0`@IK$B=)@Q+h-^VhD5K\`B*^eGdHp,%=&,GZa=1A9?95C*?aPUe&,Y;MCs']HiR;o!oNPQBrkr--^2\Q8-hLR>M1'>cOdJkr2XaJdd2=?TgGE`qMG7pn3MdE^$T;AEHV3g'%Tqb_fo2<4EjS"VdCSS+D07.k'3dmTK:]F;5.;)OnVL)'X6UriP5>&[#\'nt60q2AfcEd!$cp":DS*h<n_l"LnZ8paoAK/h<4s36O%-LkdT)`FcU]_9![>l#_lF6"GBVG`PcrWrZ)`q`@/8J;!gr20K<0j1A*c>WPT<U"/Z2uTXgoWtFJF)0>k_k>mH^ZiLTRXTF/dsmK^%2G78Eht18.7mB)Mks'(TO32P!48_\EQ%$/+dGM/l6-;a(R5GSK9Ktt^1_%^Vb\SQ%B&R[be-$7GX73fqRMpQSiDUZ/KAW20C@Fqu%2,$pai3R67)1t&R=ZmJb$&q'>j^8M7q$^'J;,'dIBrd+*WSn3NDfA)F+B,TJJrtbT9^%Jr5TB*C@gbCc:S%cHTuBF@Kf"f]7PX.K%fGhTaTa-S_:n*^1$l,B]E9?LFGZl9(&V>s),+5&gBkS1^_uo?7_?=WU,73n6,D>QQL=i:X#`;4Y7`YbP:h<s0V)1Migjl$]Gdt<c%%^I(W64jq,QMcpM`"uetB>[c;>7dp%>&[\]<G4VF?a<_1=SkP]O/s:.(sIl<[!'_5M6$u3%REPWN73m>%%Kh_qaOXY`fP0kg)JU9%G1#/,)[@_C0cN=p1:El"cE*qF&Lib)/8E12%A=Pj8>5o1o5rNm2qUT5d"[-7@1;X;cg@g^e-<FfpOH-_`@=&iX^+pTO-q?S/`X],%h-HP3Nf33MOCeq0CUd"'M]?K6Nkg1t+R;o3#$&5]dNVn[6(Xi.5h>>Z9q)O/!KIK!'ZYelWQ)q@Oh@R_%9XG%PDl"1kgQhk"%"f^%ZGIJ1IO6%Bn%V0_`MC.t]ki'uFA/8aCeSDWRO-H-g!kU-!P`B89JN[&#Sg1Xj?RJ-0j+Nd"sM!K/Xdc#42iB22j&&;B;h%ika2RB%g[7cr'O[0h/sE3T2j=M_>.&Z\oM;D\F*""f2Ms@jUQ>k`RZZ%&b8assAK4U)]c+e_i;lZHCm"+5[^_R2q9#9NZ&d7@0/B8<a`)@S%<'l]M08Nho6WpJ/H@eaj1:q;[gQFuJ>CcS:]sT.#_%`_PnsA=V"DNAsMDb5@5#Fn,(aQI<%j\-nV:OpF5K/rOJ>;K#:7HkVF^pZO%:G`TIAdGq523G9o<kBYF$19Z@*]^ODd0>7rAJ^U]Pj^0J@mPsuiJM1_NY#u$Iu?(gQ7U?afH@;<7`pe#<hka<ZGq@5r^8.X.p,bg%;ZVH&cPTUh&jEOu7a7s!/g`Qr^H(HpKF`E,BnJK:7T:eED-F.u6g<I3j>5ULZ==M69]rk\;Z'\ges=<d(X0_JPTi)u(@,\dNX2We%-dIJlOd/L;1HBDPD*[Fj_[WT<g3SrTWI\[-=qln+<@'\*V9je;i7/7q9Gl-:/Rp63g[2GP_!&p+Oq)_C[A8?uSZH,@%SJ^E%Km[X%LF=0Z8T2p?Z&#^<eu5A\iHUTd";A4KP8u5l8S6L)h'j(9D@iaOZa"4JQ5Z#9n-%$.Bnu&`C>4<<K`rZ_*D&nR3qe,u3HNo[e?U"V%)D.Eb7T*Ksg*P&M<1k'1m+D2$+NLB>=YOY@U>b!IlVgD;dYZ%._Qg+mZt=#be$^bXNMO?G`1"me#&gGN/5#/0?F6gfJ6\gLU.oLO%)tj+opHh)qa<Uk3hQZ?+,(0dCE@sT^Gd9G%8')V;T:"$JrrW+Os3mBp5lOQW1R8+DFInfIZ7\[^+D1C%/XuCAAGn0Z-0tY\Abq4c%P6]3#n21'.d:$@QE].&\@MRfJ&CB+sk9V)ia2S):Bo,*Fd5$@Ml+FO?5sOpC`SY2a>RdbA]N%*^f4m@:9C498[r.:Ql$R0>>@Zt#%[NaeDLj6uH\dnAOATU:.XBE'^EQ9L,i4%6Ss%f^;G>FK5=Z7a8^e5F+aRlgT%<+]4Y)I%r9(lDa9X$.54j(Rh\9A465r>i4XaB%l%kVgu<]bWlQ+F_Bf,%?62.S6Bt-0$6L@,:O40UcNDCK7W/&]fEt/NcB2Sn`NY6JO<Y>Cq?l7EX=FLY>&(.qBpXD-1M<QO-*%\8E9b%<iA,*H5O="clX`Ml)60+&ZIr`97^2E6j")5d?<7JGbZUBD1G]f;>D'P2(KLaV13&[%1H]imC6lEe#Kl@k]_ZoaZ!;O?GB40^#\eN%=UTQ-RMa&(S<7`sf6k7B?gW&@rUs[k]bO[).]lT+R`DpTVg7-P5<bk,:;?ZD/[S^Se`^rWlRP"'IbEtrH]O^"q?E#L$oHMeR:<j9%qreaKT=(u^n35_?jp??Wm"AuafVpoAOH5%OA"UC`'3+fo3W.E8E1\MtcgX`*e>h-3%;0'MMt;-07DMCCX3F7\0F[pD!-V9;QeaWM%Y\a!GeS2P%QF,eCs/OXSD&4)q/]D<JH<]aCK8)hYhJ:@C@-+CqlW'L8DDg-mJeu,s/@Mg/UaP78i#Xh,`8fkq8#P8&8Q"rKHF4^F%4DqV,h'=):8Q]T2"n6H%'cY]e7V)+jenE[9p:"<!4CXohI7KfkTt>g4_\)h:"\o#W9$u,Oj"hLR5jR5Pl$$3cD!$WU8TZHqh#o:G%DpQXgcs#efHd<,LF(G-j!AMR<_!hB?&C^\4*Q3V?2d`XfJXd#Xq,/L%O:X_C7RgSQj[elL-+*Rtibc#n(k6upr8aN95&5#jb$"Dp%oXm).p$Z@nr#+TfO*l8XBR=T[d*`4Ocb5;_3$fTB+^1J4?Vuj(@K%@L)$]Xg"q5CcC*09M[Ih%EIg52T:UMtG:9jC$rHrg8En76i%abQ.8MU`O,o;W%JImdB;e#54!6QCS4JS%u7BOe7FhuB`Zmoph)kiO&43V7I_T=4F[VU=WBr?,cQHc6<lrd+Y?klCK[Yu<0=l?J!>%rGM\qs#LSgRon<`qNO3[oh).9[/,$gf$tA^D5UG"pCP[\o$tbD>*@\c8m,\]s5f5O?ICOGpe3Z7.ne.TCRHH'C^"p(_(>NQDM,WW%dHr&`,lbil4J9U[J*Z*5%3$kZ3$f<Tg4<MT#XZCI<N;0\./psl<UNkG&js?4riT;=f*=cL&/P6uY0D_#0<&=\=n(=m/<!+<?@2GF%huD:b@(0Gms8PFaObI&JqOMYlA5)u(Y%\a6ImQF@A9i'!<f?YN)H-UU=5bm8`_'S9momtcr)WFX>,Cs2\ft/5',nB0s'6#<?lr\(%B=7I')/a;L\shPf:AcbLQ4<fV\k9(G=GJ9SpE%R#%:(,rG.Q6#moeB.!rbi7/Z>QHO/q!fl'iOkmts>;$YSGD399o!+H/TQkL#K&%o:o[jW(-B\G/*Df?1L7p;sdUIs/JNrec599\Oru*/Cj$nSgC'F=Vg,8"F@H-l'5Gk:*j'j;'S9YZ0f-LSfaN'^#%,MV#b/KJg>$G%>m1I`d%2ii6Mm'<FSKOY@FE-`H_"WPgFg@WQN)O#C6`JAp-7*D2VDcqU[;O&g4:mrrAk5e>%3]UCl+">cMP:u^DFR7G'hb7m=.[I%W0;%9JL:skF'@s[L-39]mCu@gd2MX,p8Y@f.WLTjG5cB27Ge1)4tqM(Z2<Qq[8Q<L>SB<538]cZXlOdn"X1cieE-[S=McC$^q>AG%e]*!5>t]F8/_4]C:K+%@rO1(SfGJB?.um\?*(Gp:Y;O+e^&OU\_78_+!9=XS(]RREg]N]g($ihNH$$6F*W_5MCX$V$#JA(-ZeOfQ%^2;`i"$2e7[5O*l`btbXr9s`#$[JI`F+*@]eP7(DUBC#fW%#2:Q"jlP)krg7XkqFVPKKJYi>cUcFQD:jVpafVB`,kcGE6hr2Ogi*%@-r'&7lo=Jk]V_-k\/"cZQ.BsoGqmEKo#ug&-&PuE&=EKkg6$RY4P(BF?NN:UdM[M[KD]<p^XDQO@YG\iE0KhSdoTNdH&mm"S&]e%'"NOa*H+_Rp?suZI_Io$VY`Q+f:`k6U#CGQWU0$K=fbRaea_\MH0!1YDepf:?&qBk`qF*hgNMD)gok(kq>l3J?fMAAeW:$<"U4s5%rE$BJ4NMlUQg"-9h(];T/sUapoA1D,(I'CEh&9\g=Or$V\j%+jM+4cAh/0j?-`FT!gqDb#r=$AdXYt7X3`t/>"9`fNq,"2<Tk<NV%JsrD-!,@8&6Vrj34n^0;:8uk`8)2b#j#YBml.Q>Q:i!eS_Ii5G<oW"j/B$h;&ELV1=/t_f7:#>_^G%"*^KRI?X]HU$m>M*;<7-&p%5*!Ud@i*HP6i%5U&&2H4:*n9iMqkb^r&=uZFN`e.3+et7g@b#$0"Y^0DmW`R?;:?UZ/=^]ZGU"NcA+R6fKRkGIKCS&Zs2A?GTt%3%Yi"io<p+sG00Q7<X&B*f-%osTohJt(+-l<qI=,C+<OQ,F0jK>o*EhQ$AjD4secGImeU!3agT)KMHBV>C]C[8$Y-%3s53Q(R@\r*G%<iY!07l(S0m<0jC4K*8<Jt5(kL39QW6mLsiDmjQOW6gpJ*#Z&FXhKEeWC0DZ7'do\[%.19&"dpO;%j+?5m<fo=:RQk*b<N&q$]<r%P_206k<LbToQ-7K-3Za$7[C.Q9AX)nq8k/R;PDbeA&KU6$FflD]t2aph6$n,Lu#-M#Q95ZKJ(??F]U+%o2b_DB`>=A/g;t4>elqp%a,r$TSad]dL5>Q4I0`pNPMZeARHml47605qef^E6a\7HF3K!5?PNN\!\N!`s(Es)F?n$91<?/+S]EQroqd!ui,]/!c8O'Qs5SSV@%Y4&;h_ONX<lC8t+FNW^KU?<T4Fss_,of5;C)cJLH233F*`WfMGVtN3k$7ZSW'FhMSq'^l.BLlS'L5$&`6(n>fFNa>130$sGT<"XS%!:?)g^d,mH$s^@G""_8,*+;NoL3Em0ROonO&?Rf]1]eE#?SmPgn#nU`lePkKIYeA1WfB$P@bo0me(Olu`;THB.uoK<GLp<;#:`oG%W4+``DdfBsHnb$"44h(*`]k5C8\T4jB^"T6Xk]2gcL7=h:EMrmf"NN]YU:pNAp4eQ%YGa#IbT_P9+8L>K#Z,\*U5g*3"-5=H4-$G%m`pL2a2p$5ZOfO:pXOT'p$Y`:("e@ER#$!@M256#Lj4VFLfYE;hXHZ\BijfP/skLEm4.iT'+hA*+l;b=.!USM#j]c,]YZAmL39)<%GkiKA4U(f>*(iI*)M"6%q2)&:T87ghM5Zc5KR3G;l;^2"P+RDTq,-]_6cbUdKRA%Uq2V@ChFkTCKd=u<^AK8;b>1I=>S-^Cr[B`m%BpW>-?#Ck?jX-^-DBdfr-D=^_Lj&S*Eo\R@?#GmM(#QO6qiM1uQh/SlG[faHZl;%c,OKN8cn=LY?,&@ce[=2tZVn:i6K,hY,,(&R%PINGCiZWXtGt:'V+"J1VJ;q^J@4EA6q9h[NYqucP9-_Gr=T8[u>k4!O(lB4'G*2QE93PdOEG6'7=E9V8mBn#o^S=nsj6Nr8hK._#%Z"]glD2l,a:4^u8"V4?r.soW][_I`:@_95Uh,!&\F*OY*=W"W"eRc#Y>p[4PlE9!gB9/+rn)inh@&/8"0.YK-q:i&u.rpoWC,4?c%+1D`lX`sC(Uq^`kXZpit[e7>'dO$?kHa7Wo0FOjjqcQuAPf?'9[N0iR>@]FTDl[YYorhGUB'H(+4gY%70TL'm$_>R\Z+45Vq'r5u%:+m#cUWG`=mI<,=G+m@1AMXQecXa!Ih48^_lACK9l[,6eOT6#N0n;"[+?LlZUO@<M3nCpTg;3K"_JDA+2j%4FoCTh0+3aV6\RXuj%rSZ@GYAUgXJqJ;;=PS2F-Mj]W6[a9o=74gjhH[Y%X'>1\NMYugH^-Ms8%lXc(5^Gij1Eh_N-!Lp-I+ib3uobSirir-S[qt<>,9u"%/mgG:HV;?5`q.kq>1jJLX`<3$WD7*,>6&n,%QQ`PQ#r+qQ+kIA,I+C`p25PMf(Y>J;-dCmk;'+$de6,8YeG1XI!2*lmWLoZd=q8L%rOF5R.s+PfRN!i`g"#dBm:Y_m5-D&/Q)4BEn>&jNkL6=:1+CT&n?h\dqB@9t?P:):^+>kH"AYuHNq[%4P=B#PcM$$cVp!+AIV\=c%H2^C((QrQ_PBN9O:?)A=b+C3'jng$c1_La1X0h`1^+F_;peEkg^.8X`mJ;[sUn!i::AIU&M8?RA_IBjX]&SiZl2HAmhp8J'-f(EL%?K.#P$bhhm*s`$*.J!HdJq]!9_Aeo-?Sb<biEa.a4S<noE71l94^GT7+7&hS9H)f--A>SN.@kElCT[EoA^@0Xgj!Z@:&<RhrbN>O%-;>3ieQh/[1!d3B.IFfS##0EJ.'@ALq+nRbpY9'LXBp3""URPo]u[;Cr[]s&r$G_,W[Dum-C$gIp)[,prf]tKpRJ4(B0]sUCRmCK%eA]UcE:,Y6B0JPL!L"u@Z1$gh`\T'f@S^4hp,CiGr$U=`N90>^HLHdKhSR:(2<fO:`Im$\1MQ#$6@"jB4aieeCOOjt:=M7aPAZFT%H;JH-Qc6H7PB([38l$KMMOmD]/Cn"Tmu$oR1hi7;?$k0$-U%B!VS5*(QbJYiD(U[]Q2YQ!(65Fs+r;rtA":/W?(L_^o_>)*p@tl'%i_18I\Yd&CDLM^`HM)RR<XP:;T=[+$Du3=V,/th3CGWB3j1Em3p<e9GUc5LSo=^egcahfDj/b$cXMm'al#,q^jl6*hGLG[Gn&)q4%^[C3@))1:g85&B]>EAZbp$Aa837g%8GLG*\GVa<e:@)_DcC#BSR%%0\\Ql7Vj?'>a(8%3l4i_UtWL301:&e4A[3dJ^Wue-p`)[sT%MJHa+@<m(Y@!Je$gtQ#\^e&`5PJXP25ISp?2SG;t>>%'/UqOHafU(R)c92ma=6ZOFHi@td'Q/$(f=Q)`BkgTo*QIK3DY'Gk!Fo==%o*V%3O$AYO7,^U>3hr-5>YJaiLF6BoFGcnA:7CmZZt!'>2YEqu`k8<Vr^p@_AhSFln/uti<IHAoSQ[VZ.`3AL>VEdtP():$N@Z1,%?gs&ETVk#bK==rIn66I;fqj4;@0`+L1GMO+En.@nlM4c6pfAF&m^M?W[eVq5(\k,$5>47$hi@';-ELLe"[9&:(13@0^GU\@LU,gH%Q47o@hV8bGT0=]p^Ma:)HTkdh*<^bj*@r4I?[$@G]eBELSu8dDCUSNbcHdlOhj0;*RXsAQACnRXcF5#8]8`(6k5q9iIEEm\!l'/A%]r6j<hc^lolK-b*JPUdQ#jI8_D]@TrmRtp9J?"MZH%<0ImuITcpFbsiEjKk1'(kS>gsY01=tms^ElMgm)YireYW'l5I;@%5MlXrb%N6)<0DJ.4#F`M':_pdq*Msd20D'lOTq6oe$^Lk!jPr:6lTNk<+/e_U8J8NtT^H?-m4q"RYHI^[$eINFXZ>N_pDgAOV$ul*TGH%)+%lRS`,Ltr[UAJ@li;QeYtN30!^h(tr<r5rL3@@>3I,d5I`&RdT,G.bf?D.G;<k;I3aY3%WK.ttO!a43BQPm7s"cHO7g?fb._nG^>8%&?dp@3jT=QC$Su+<:tJ-`7KZ&gTQ"Ubh(]M0t#QokHd\E$aRIQV2!C?^&XQRkju[^:4>-+?-C1mhk<.'BOfH)?\J,@DbD20PP!U(%AfgD.qgf\e>.jcVqF+kE4kF/tF03e$Pm,aHJ1md+Y!+Y#\C_M)?5`UYc>0=HL:&E;W79!!,;(((&g);3Knc"@5LMGcO/a[W>[&o3%LUp$)jAf$:n(X(%\?8Xe$:`M*Nauj`Oq!.1^g!*.8+A)#pX3dDU&=Mr=kbC-.M'\DJ`Shk9:^V8c5<[UlW'0'UKb%8ZM.HC%j(Sq%cRclVS&L%BWXoFWB-)!S4lH/(L3/`0o)k"D9*`-,=!mG1(DR_Dp+I1&>W.'CGhTtFYls(Src1,?5\"nOc]2pG^rtiBblR7<`mr*'%+q/F1^KFc3D@B7D^?qc%U^Ilc=anK,(U>6:/E,$cSX&abf6lAA[*ogI*5eR[o++ViXQ(`W>u.nT3LmHNd)$+fe7[oBHF<GM9[2C:%2HS0?'K`DkdEe*HX*:qqQK-$=_o`Hk8nPi@DI&dq0t&J=^:hJ"^^:%l%ftsTD_n_d]HZ+ungqB<]=YUbJG*^e@8)b_n$Z:I>q8l1%*+5QmrJ9!`l\-@d$FkBAW]o#hF5#`Q2<\3=B72_Re:Lh"R45faIc#HjZ'(qq1I.8_r2aL?oEWaZ/I[qH/8kpY)f,g`7M^Ubk3t.3%Y,DD)7a1N-B262>jHD4H3X"<c7)0D;*"-(E4R`I!#Iq0,i,C7`G[2*S#_`nkZpm1+JsP/8`j9kRE5D&(OtN*@DL@`XcIL&3j[LTM%NTKsb8]?k7,J14QD]fXA+<rI7WM:FF1\O;meb?9=i&NC.a:D^)O#o`p%L5@,fTInk5j(YM_%n#d)ohhf+MJW+QMrX"?C/E)@d3tG%\>>HVm%V9q?rphmqhMOj0dI&C%%TX/h`BR+CsuFT'nHrTDVK[;q$dBGCYV6"g;sl?Ae52u6M`u4_RS\=$7A05O$pVPP@t'$]\dCL%Z-9U_1=Jh%*(%"#@)UL7r]&Rq?G`*`I<RpMFPcWUQ/(6Go:EW>i]Rn^'_"I7hTR^5B`0@9AJ%35J\1rF',S-<:PSRX@G,k.WqjSr%[4a]\gIkkCc3@e3FiKtWMHKGr?T,RX0Ml`SdBAad'T!u0$!*]c5Q[SNh@CkR>oAAE/e"Q,qMo&P&5b^gj_,'IRDe,fN%I&eLmr`_%nBqLs'(b)>X"bA]8Jk>#iS7*"`Ku'K5JtWViuQn>Oc3roX::.*M9uq0<cZ5SUuYE/Vn0X%K]Q+J4Q&80_g(ro7IrJ:L/@93LuS?3%0HQ.n01.ST/01>Mm15N>G/i)?9?X71Kr;*]a/>OnZAHcj%Hk6nbR?jEG9!#]kt4121u=03)Y'sl?H5KD6\H:oB74R/amHN-D!ZuV%fiWh./bZ<m0o`\A>''JSO(trk5">:-]JA08fid*gTmc`AR.\2WMmM7VS]SL3A7)\ReYQ\$%6C0cWKu5F+!>8Jqi92FM2aC)=G2pH%h>9.5^s)nJ4:N7dN$t+!W/S[3fs&@1(RGY]K1_16"3>#Z?me6OWJaq2eB4B80u*F\_1B?sYg_?<E\?%hfE90Q%A>Ms[.cF9K_4)u%fBDio7`=D1q!WZMO3*k2bF0K2m4jG.2WsnOELqZ<Z2=?nfjJX*b9hN>hUJKX:2LgjL]+:97%Rm28/(mArb_giFPiYq,^R>n%ht44%@0#Q"_o2Gi*d3WBrGgb*<0)ls%6X!XXl6%Q97,=Y'gmD;9*il";EFEK*ji8oa$4;8Y_GjJFi[RKM`HBJ8;u@2-eUgMjS[eML'W<#%bQfL#!BBm9S8bZJi$.#7:E-rQLflKqhM]=*k?a+8"T7%kcZ2OHCmLGdi,82<QW\ltYj;SV+C%\\!HNNG6S`q*-/8#)&CV<MV_C)W%SO>+88GU0n+Z-[)`(J==LX:h\)rMh_!_Esj2[CZ1D@fUPXH2+D-[^t>)KBC,6YO2rhBPf-D9D(#\<pN(,^T]8/3Ja.^tg\R_Q0/s%nO@[dPe.l)PD@Kd0K'n=Ri5f5%l_Wae&8:*7gpQJ#V/a2DaJ-g.1ZS3.#9c9Sn&@&pg36)RNIEP$rK-s%1L)+a>hYb8i\nU*?snt%o=^ea`+,V7*+MAk4FReT\1l;g\L;`jG1t!.(fp]A0Y,D\.q-BZIeoFcdI>2$XWm1=-W`EW"h(7W."-5p8:_nBXj.8`5'hGl_VVnb%M5)H2dg,pRl$`Bj/eFhPPJg:j]\LL6P/lHMTLRFJ?o6HlSfZV#3PQ6.5g&YYH2G,J83RDc*Xged@s;"*X?4\CgO?lQkFT<_*h.Y:%_jh.N/U?_.IlYNKF-3[cRB;BU5M]CB,)eT77r':'MeEduD@3:X],ud9eWoV04:C$Yg),\/Z*&")638YWcbun9N17?B3,ZL.Z.4th%E?C'oY\IN#,3p\KG<?\$q4)lGr/<YJg:qC.._8006.Or^(OgG\2"6W_@%9Vq`^3'?NX,IpH<(k@U/+SfmEJYOeqq>"XdokkKHqdH%0Vjcb>n\T>aQ27L7e\u4^^V][oje1.^uP\1XsLmE5o;sa#T9Jf2=epAHkccuI5JZP/J9T#-4hVnCU5bkq?@O#%q1Dd-E#9F2_F$l%b_X9i7qIZA/jM08LC]D4jX-]RoTX"PfJpb9\f_aj%usL="`G7>rJ=931@W7kB;/Z>MC/M]Zh@boDJ#>+!"aGX%t7XaCn-]9HL_8:%"47m@N?`Z"m[6$hW*b'97cT;'Y0T=`a0)V95ka%/71Z;nZ)Md4r7*R%i5Q?2:)eY'epnr\SZ(X@bV,.tKZaZH:0?"$am#?boFU!D%fd%!<>(6=981d=u+qY*UoP:j.--Yb8e1uOgpJ]69B,9NqY;h"m=nZ*.KETjb/%,<IK+_c3EC>D[5dft20U&MJ^O31,[>Z$WcLGCC%bHIHkC,riA/hL5U1'%%ck,_X2f:0K\;UE8Fh47>Rs4D-VLUXIq!bLq<BBFO?DROlk[53Bj%uOEtDmqK#:E8t\=F>JIGX8SuguRri%aFJG9!e0ch5FhIN10sjQIR<o!hB5\188Rp/rpG6D;*W9'EoMNK"?U$A.@LfSdGo:'_N[[X-B%NPp\afWZqa)X_hnFBCJ`\!<Wn?b%*"=-O4n$4:\09l_U+#KfZYO(edOfT)k4RA#qf+&WLqCo.o@fq/6)6H0pX=>iTg=F\`,pUM@D-TY/]X_Z-Yk@SGK/1Q?-B`oQB'F6%X`ZgZVnjBWhV5>hm`/SFH1;f0@J+_[/oHIuF7CJ<B,+/`l1]6<T3hd"Oh`jg9<C"GhAU<ofJ]nH)t1?.m9U[^P/E1$qeYe;pV^>(%*+4#6ES8Qba60^b>-]\*>%!mc.-,I8?#e!6[*$ZqkqH1rVacS]ch8u^]c,?Q^W?r8]a"5D8ELfdFo$$5\6m!ACp[i<B:4&%I.84s%ZsRC.D(YAA(ZW_VO_HCl6'f_OidP-Voa@dam<"QX?.V4b_1fPMh<2o<IY+4ZhX1-(^d;?iZZ'afT3qY;I=&#7)%)n>YjeF[T:D,>%i&]mg[MnO&8--8D1Djc5$3^Y'Q;4HPQ1-!]WWtNQ?@D.ocS"W&E6%(c*qpO12A-rYr!s##@d:ho[@L#.NA9$p@l<u27$C)LY4^h'%6dn^YXlelD<bUIQ/sS8'710<GQD?@l=/kRjmgdCPcE49M'#lrHG7/9dH&me>juCBIG=)7V`uPGoi;K1Cr)+af%3t1@FWm0jCQ)hh%,P@#5^7X^:d=#C@>W"PT:14/Ua@jZ/NF4cZ:aHZ4PV=<c>JEbfch]V+=`7mM">3c)RCOr*XbM&L-Cg#oL/3'c9.dRlE=dG4--PTf%jBJo$+)>H1YX'+2p$Hgn*J-P>D`OucRjfL@%"UBrKu/u$^gAdO-a@J]L#!RKqFS'kNFn8?bL%7p)*CnWM0?Ym/!q]F^q\qW&(&Zq%Y+YB0(i^mZAbPQTT'euD>c&A"IG?arD]4R/IO=*IBo`KJXHB(#8n_Vk)4ZR.8;nqb/3no#8H_P;Jh\$g!\rORp>]Jjq_nJ?KN8Za%R_RffT,a#W^m#ncI#Lr9kF$B*)+qA3'%ca83pSt3T1EC8N4EW-<l@LUQ6'5G"86mfTRs)Imo8e8Y8LcP3=RR_Y_KGY':9+QRES91%]?N:<DkHR.*p-?qB%q?n%t\STI1$mIA29'i0siU/g?7)b&q1/6V#/#@Z;.b[Cc;Ah;Q]:K[_`<lD_>\>C?=qWVT<:aaCr54;)u.'%hN)C'mK?uaV.IOe1.+hZ-Ujk1dknccEFQu$\,53`#+`>,Y9KLn1%4LUeR/rJ%8;+u3qt\%aQ48oWA:dV#E/_%K3B(0_TQ.+CYBWs%EM'.PSpPfj2*Wt<8>c)S0ZGGc*.'5m(qReRUO%6Fk84WU`'/2a:nn8I9H^kiM?BN=j9bu[NmBVTpP1ouJ-/D+A/\%-nW/`V4RB:f%DVFQqfA&K45J0PrO]]+,5,JUSELS/2A[4O,YB(oG4=BT)LZ;<--T++s4>_+]mtD.Mh\)N-/&=.q"NQbHe7_W%>f(N`Z"SEO#`t*k%6Y5iIGQBPpE]mHZn*NA(H>uX#14qcKN3`3q"GX.*+9HsCfL*F=bR"k@A:$^R<coa=e.$H8O+&*9)m6:*O%7udl0<R4mN7pS]4&YI%&6ab#3cd$tH`oDrWqm#U(/g=7?4"lJG7dl!bZoiVre<eAKUtV@=!WMcrB:J:!\#7F2Sj5Xmeo64O'[Mo-J**rD&\e=FVfF]LaAaR%[6..Qqr9,hRGA_mFqH=PP+BO='uJh8\ib#bbs_;_H7Et<Y<nVXQKNM84D$g:`BqJGN0VbBWt8M`]Mk,/Zg_.OXZZKI.En*mO$Krq%JMO*Q*rDR39peN8S%+u,"Bt#6(Nf24W>_CgENuAtiAJ3D\g7@8T'4hL<FZbG-@5@N]],&GiL/I*N+blW=a*(=D6.AO&Z5-\hprH<%CRc(X1Z)+N>3S30A5>p0'A\TY#qtqi&_Y?TIC2)+A[KhYX1Ar=Ad#9B[)5e^k:!omh@I8Mi2[cB@<1RO'=IZ@0FI1>k0Ad6p$4<g%-M+o6JKt$AYBTn\S\a]j=J@hh_t%:FVXtI"PHH->>Ja'8B?Y[a1\8]o<kFsqV_iW".YUC=>,Ek='k_T''.I6/M/W6'g9["sLL1&s%\3<RV46=YZV$bG3hMKq5=MVbXkLeF0aqLAEO&b(GFdTnB"K9:+92*--g"d)s3$ng/@53PY"=G8fp['DRbo9I(9_:LOVYZA8+(:I<%"I['\SY7S9-I0/?O%'h]\ectTd7Y'<MjJ?cX<(a$qIXk/'Wq!KM&oDdA)V>q@/"3QGl1P09+"\B^%HAh6%`/s9=51g,.htPSr.D'%eFK8iP>NnJk?f*Jk1j]s>c$q+e2![kT$:PUUj.0D>5$`6)-4I6V-4psOHB%p)6)`Wr99/XSg;Aa;p4Cn:KI8tBU`*U1Ii/Nj79`O%+mTuQ*-$=&9PXC21O7fSs&t.mJLAWAoW.j/OibtV`:DJ'G.jMQO_1Wf!Q+:o<kZgulSmCB:Jgf-i/,3lfTUO^l9;=P+0"^AXo)_4%qcr!giPTqjJkXdiW*cOiM>@[,(0J^?_l02h^8plnmi7oQPnXV@"0O.nSW!\Y=:d_5V(QOcOnn^]qcVf?=6_Pr'j7[ia<]7AGb;*K%H/e]RJi@u'lO"JR+/o4Kf+hD6T;jJ52XDn0U2ejY("7<u\?W`mARBi;@dp,Wd8s5L>V<$Y0n"`jdjL:1>[33%qS&nSX^EPU^8TcW%Rd*H1:L7#fGtg/Yr3LlM[AR@Wp*VMnp:R8Kr*#tH;0Cf#B)86:cYKQN-Ak$4;75;N^1[J?C(G9GfUogTH@>QGeZb@SGYtjR3"gk7%rJR[=YGnsGhe)e\C<p[q0h^mE?<$<[']4rL#;<)H(gO8D*^g`TqkE@amGj5BcgjNTP@b;[PYhXtW7pD[d:M#/njV(p^j3U=ee_>m%(6EanC3ZY';71&LdCVG,>qVEZ<DQT3bP%[qE)NBF@=D'2F34"BCT<$Y/QmqVpI3Wkq3JdD;7-o9"5i`6@Ij2<"QGtX9UB=r1.]UW%*BS]bG0C43$(Zb*&eO'rN[rGInL77!GrA%FDWHf*1V>ru.F)OR4%!+^l1j9)8Ren)jk8*jCc5AWHA]%YF"1piB?q^dL7p`!!@4s(%^FRWB.*`=>fT\\&JDtDBNRG/G>[b!!45`h&PE]]9k:$>04I[Lg(3n!>?CoD<SF(:WeE,?l;D)o?m,cpED_:uhH+)$GHAf+^D3tW!%%'<h-dp`uVB=k*#W&T.J^9Eo9:TuLe.*qV+ip^*g9_Kd^qOR,Y:;?AdhnO`5V*(6`fPo]i1j+(%6ZKR31uYp/m_Qlqe(nb&<1_?b%b+S[n$-KRlMR+Zo'cemPAgfP1bNkY%4I`$(460^-QL\jHip>X*S#OQ:VoIAB'pPE2fjXfq:j1'UV'Cpa9iui.!GRX44+2DJ-qHOI%j1d4mAur*6AU/HDEOIs\)V80c-4Vf7eF2Oj_7R&Pmc\i/4e',cIGDH@RGK=:>W*WKQom6,XPchJmd./Oqq8VDgX4+ADpP#$2hp1[%c$Y`3YMPi;B>KV/ULl8q7[>"gDY-`5Md/RVd7G'1nb8r;lV7*@Cu;icR1[MPaKXR&n2XAaa*`:AQp\#9s7+uHN!J.f3oc*;L+(gc%.`Oto7K9)k4;_S7X;ISG%>P?,j/b0ZriT_cSTFIJ(#pi`2#)L<GU+QnBJpUcUDZIL;)(85Yk'G)SlNb>;^ne'1>4Q"j3t`[DR,/i%nJI`q`Am!-:L?3&=u#G.Hi9FkESnq8R9,?RhaR%(MXfZ*[(iUX+.#&M]8H-8mN.n0@Qa-s=Ym/sT1rTh=N1%<F\0?H(a$kNs-&?1%):03f`H[&Aqu3=!I#,fAXC?R?GLfPs0coi0qAE@nP8cdkf$i/`/&ig=d<D2.^1)IZ2-(k8j"<r9027qG@[tI7JkVb=<K'lB6C\eE%!_UogYBuh;@ba1k1$a_eg!SI9=n_(8K+jQJ9is+kRE0N=[US$=B@l$?N!J7i3m3EN61r\^oDNH'</gk>XrI(lnHd#?YCCJ,fP`?S%-u&KG`H]aVH"L885+]b`/&is=miK%\aS2MAZ`=q`GB!H@9@(%USA$6@pUOMg/&o78k&2`h,N4c@),uP*,Rco`qGu#n.`SC!)f!6I%nM(W=)-2]K2*RrVs-&=[U6^Gh!&D`TET[cR'>,i?ieh`1PE?_^N;IikIo%jpG!E4$GZGR>Y,Z-cJFsTkj3uh'3,-A,7%X2'(#qK%%7/T?i32mb+RH;&CL8',t`HWZjs,-^,<fFq""uYFj=#',i1,AHYET^kc3NP2/`Al!*$[fqlX=D3p]UqcoIoe?GP%d.UMXcPk+.KiN%4Q-4DnJ1)ZGT'L8Nj[j@%dq*3%X2[*JbT2G3o&tT)#LB!E2R%gp35'Gj4?&el>WY.,kcH4iD-ZFkaT;!<up_YL-&B;Z`aj_J/`eB%o8K`ffdc<;>93.2XT,'\nBf>SR8er'A_LP`s&jKS;]BW?QbTI/[o>]mUCS4=Zg)MM0XSKg5H,,'b(61%Fh#JHq4m4oDbTD6Wl&KD%VS$p!iD\6a9i2opp?e\4Wt'>g_l(T?AZcMeQL"G!N#>WNqdagK6$9\U7eb--_jt<(O?/;,<JUHs8MdCW[rLS4BCQ5Wi=7UeU%C0i%FneK:n"3R7ZfR8H[Q<377IYNOiM0E!Io.4M/k9o)e_spa]X+RIGA>#_Z>G(k*?Km=fiEki[G`[)_p_YA#@n@j\2rEmoi<rjT2^S-%M"]W)0[o<+-Q+?Gqn)._^pVCn3o$\DpX7\FX2BR,Qs!IFqe<=g=,2jiQPihZ414%Rh3Xd9GQ2,Z-?s\-(m".;e`"ecqq1g&Wt'>3%)pcJ&W]E8DMK:]+iBt?3T2gY&h5e?)T1Daf;<`rW=:9>F,J+R6+u)/JU/;AKJT(DQAb$Xf*X;37a2+haGo:PNE4!<^Ka6r@ApORK%S+)#lX'5L_%j@eAh2h;2m"n=p7kci0.;'43=RWj-a4TV#^D#DU270_U(OdQia@YAA;`[hOqpGS#<H)8O+J'o2+s$5\4[;_]Md+Oo%(O6*ECV;*Jc&X@qakadu%b^bDSpIW;^UKBn"BkSV*^BVTDdgqNPbA7OI^X"KWIg.]2h;'U,>RcIJrVNkCk=UPKE`G-"+uWoo3d2p%@sK8q$1X/gVn8+4>\1TE9%`T=!Bs>9Ok;4&:A>f#D]_GV^jC=H+E1$6Fs$hgD&=g1%ndCB7Ng!.`Tpt3KS;K0%I''2gAMjeq^*r\%D3i<K[MWi@aD^gNa9k%uq-3lZB)>%"O:ids4^I<YPOJHSN.o"8O"G7+e^H=#8*U].q#5]u3!%,Ke_BPi<X([?`gMQ[p1Q$R:l6#(%YQ+1dW.X<t:pHM"=6O2tU.an6.C6\cA$FtLot'l%Qt`uXH"!>&L?6piWqYRC0UkdVj7Mm&$/U4MgKC'R`ocW6Z!ShU+#>1)Z+]Z@%Jbi)Y\*K"AfIsZf-([5s7cR9i_Mijn?"Z_6N(dQNd2nLUJ>KM7N'$]lds*L`>iZQTL"-mDl.keIGNf"H#B*1P\7PMp,-Z1Fk$HXG%mo45Z/\\Mqn.9"Z`F`#\JL'ZrKc04-B5q,YX]cfYiG!5\+B@_HZ_Ocs[BH4jFo3%2@YpMm-:f2mC8+B3La-B%LT-4o>gYRDJ(4t?%%VbKDCkQcP&Xf?$V/+#B1(Q/"fP>UR0np9gCK&gnGpfNrk1Va\1At?(W(@3d(1H/2JD4TX^;.P_BUo;4!7nbpQtfRON;VnqK2\%r%h6b2RV@N!BBIWZ/PjX__SkQ(m2RTMdIVf<_J#cq\C-B3fQ'K@t7M6uZ6)8K<#QaCqpQ:s%5R9`Ngu)S1aCP1>%`%+.@'V2QHciQP%Kmk`]hmM65FB-oEMIOSLf.rteJbqOX473["amOK]IR!DJ7/(8P0>t<"CO^b(6VrZ'YK%IYVXnMr%t<uN`4GW@0$WrSQJXi_IN_V/%QXSm06,t'r1cE18&]OSE]ca_1l_rnVC!!<>T74e\jU(QPEW1tEWp-FI"7@=`h.Ph2(:?j$?;!)1\KKT-eahqlLVCEjg!Y(HcW;IN%c:fg"q),,4);LrXX4G=kjb[[;2"ZBT!4=rWSb9<fb9ITf4EfNd<6G:%22c84;9Qdk\I2K^ba#5hQh8u<269:(Gog;,0$IMf^NO4j%pQI,/(J;W#:(kU3f/J2)e`*e\IQ'P8`#:?AGFgJo6e-7fR`,'qE8G6,@/#NS^!;UqqNY;=+W0[)ZUOiL1PlYb&`YPG="]F^C&SOQ%E+(^.2o9O3_>URTMBhjDqW0"$,-6%XRr:=[mDG`ASR!JH^$^93ft=b/GllK]DedZ6(G6-fr]NoEIhH\J;-K?*Gp4Pde^eg9,NO/)%CDl0h$Sh"]?7.Z6k@6J+&"IQWUQ-(/6p.%TEi%$$_e>@r/OQ]8:H^ah9U2b^'eZomIK!c[/Y1Y5V/.\ohqP3EEI@Y&1>$7/P+9[A%Mi57(hp.b[:1mb2A`;_24C-S$prqFY7Fg2=4XFKa[k$V+Kj^^*dP!+QR6o_\60hk1`"DU?XhmLKl_=utptSb3GFQ=;)eQ7#[[\mL%Eojc8^=*\*`n]9<k@-4g9.l(1Vm7HrleTn)buVRrM(KfK219?1EUdIdm]a/]B:,$ToCjn1Eq/F<+WL;r?C`WK5ML2>lK%,.rN;Z<%UqYa35*)aG\pj?pn8iZi[u]FM4tg[Dli#)Wrlsd.lH8F.Aps@<?N*!(jO^lt,I-t=6`Sap?*,Z%3o]/SI&kuTN,acJ>H88^jdUC@%rH)WFB<cH>'](Hd$uUE=^=1b.k3(<epJ9t*oQbk5X":),PM=jRbegL(m4Yil\Gc$*cVCCH([pu\G<oDUQT*2^$1UDZ)HR:gbG9e2%f(YDeX!^PIR_"hG:=n$SF],j].kMG8L2(;UkJ@Cp49rH]OdPU&$`g\H5.=jb/oZ-a+l/qj>eWaG`t'G!d(Z%L\b*p^SX6KCY8;[L%WMX\OM9XkJ*Nt6kW;i/c>[**AjVP>,H9.A,g-8bi]/n`0oVGIi<gB74$CdkT/<DNdmqg!^&NDYUp&%_6*j)O1OgeiX?Z<OposN9I%3*P6nMl-_GI83eKLQ0!Z<3lJ8m>9nVN'.'\D.qaYSj0fb%Ck"YkF`X^)2BXb0q0bd:EB,R$2*.uk#4:TLV;ue(pFgc6fU;Kr5SHi%II5_ScY\&Yh;Nbu2_V_PNRQXo\WqDZ*cJSK_B3!'EC7sr`Aa,iE1;%6im!CZ\b0u07s)hlA`7>`=5pYf1:DKZEYWWd"o2r7qNCj]%l$L#DX'4/qgOKgkT<m'CB>\Di::d[0gE174R$mU%I-PL`W+Tka9qLCVDbJd3q<OHBD7!O5\XU25k^5<"o<#bNq@A;3K?=D=^F[=O%NUpf-bS^:fWnlc0p)?5?Q1@DI>[CN*D&n$,gE.O3Lss9KrSBl@ZV]n^j')D?j-Nh3N2uMihmce;DN%UHEIrr1U2kb=4AI3K1LI]%%pd[!F]dLe)l'%SlY!n>gbdZ3q[Sb+0#XIes45"iG*j>7`H*UKKpm0W7juUR!X+Rk#p1imR.U?sFa)S>!gdsO)rKE2:08r=G/bR[:%c'?j!T7)bbSeK6G-36tDH8s2upAOef:"N<d&P",06$&I?a)XCi\h6/j*?5aNJ\9u4B(#:\1ZpYK:%NN#nQ>%`?h1F&HQ)t+grb*7%[9\Aah+9#YO8A1AXckcX=*JL)H[L46_UAmLTlF,!mENarE8b(Y;iO#=-+UQY8AO*2]3+2OITSU48AnJ?T98m*%d*lf#/?bcM"T#X%K>YUf=h=X#4ZlCi3GhtB_Yn]Ti4A_Ok7d^dEEHa_hW^as-sr%TjnhOqqnBW9RO^%=muaSW/HESdRJV8%RVSrClcMQbmOD;pfT$Io%nk=R*dnLH9EaVRjT3cC:*B\K6/qOLoD;"[UX_)2,#6>+prl!"eX'iiTcljsQI](-Vjqn!;J#FrL2RD=Fd.,#&b6@g(q/\fE%CY?f%,1YqIb<QL12k2idY@SC1T38IV@#qu[[MFj\\bcn>L3f(IHL!27^>!qqKT0_0Xe]ia:bi^cd+t>LqV(=t\T2q=BkH4_H.^j4;i<m#%.5Z(U`Dk9E'mE^<)fNmt8YP4^=<,9Gnk&];EUG]2=Q_?^\(,"):VP,0^=YHe/]L"n3H=A".K/dUEO5>pcY&=rO0Y7!(TOTrhglt(%)cu1.R&^;uV6=;ZeR^%ff"cpB]Xr4BmW>MEB0Xt.MqRi*B,?Jq)`EZ,gUZnCo0V#5g:/(&l(MD#/P`+V="]tq.DY(qmZoJigI<fh%oIom;12jm55UVQ;*ZrZB@+(t9SYrg<NbO_Bb3=hBo<XCc;qNDZW'kUhq:N`YZG:OjS#9?F,+9&^BrR`=aIMZT1Y,j&*8gTQaM&J]%.^EJ@><FsX:2TCkHT$-UrQJpSn2=5"fhG@;pq7:::2O;0nfW(hf$j<1a-r,D^RlWR=$Y&rLYP8Y#[gK#GB<'t$1]DfV7_tjFglX*%g^V<nr*mlaS>Di<BmlV[c:i+n)4>jBR?cTDkmS8A+']!25m+I`TgNYtIWGO'CjZ,,X$\t"0O#^HW&GNR"neaAZ9Joi^pq7IAt6UU%kL/m2[;E1unU3Q!l"iJTJU*>-J,e`>XkJr\\^u#d$e@'dK7:)P%fhi*+IBEqX]i%(U:m&Nqtu>jY47dKELq'8eoh.8C9=8dZh&0L%V(Yfs#DIjJgg-T@7XG6OfXh7Nc88(`dR"jdrY,M5g7?VR=SmZQeCsC.7t[j7=uKuNNU5V6i<SbKHS@i@]C];L,6=SdK:-,:_hHV6%7cb<ECO9Kj>'RY9NI%kg[B'a+]tUBRH(WqdFjrplZOI+WDeX*3qb.'V^O1YL5^%$"X)/@UJj'%kBPuk.I?%\$Tm]`<_r:#kDXD)1%"8d-8Cak=NX#Q'Na+:T;AlGE5e+G(O8^WT=$GrE'ltsGfpHQmO8*UCcS:X-l7m:5T*9h[O=YS.om[eRQ%IK!r`M@r\SS`CYO7fkd%S'*BBQS&7drm>LeJ@VlcJEGumah*gA>51_f&?j(<[uk@"chkmC1K2"[i[m!?r*G>leQV?mi$oRDYX<SFE+/32Ehu1#RTltD/.c6U%XC\\C9lFm_)crT"I7qPVdrSn`m&#a5T@G\*[B`1KE-LOr=[V&\D^>rj]*A_1q[$)"[sdA@piAhSV1Y>*)\-!3<.i#/JP8KAPl:JY%a_:+e[=HVg"WF`[[oXhBY3]MnIbm;X<f+n'04AK)eM`TVkfL5k_X6>dmS.D^>s1\Q%[9B^a[C9HI%`"?Z0\U/%s4DZo\4Tk$h^b+%(b<QT,nC;)T!GdZ]t.Z/mc(O?rSH2a\UDf"5d>dQk>krI+%G4dd*4^QHV9Ye=FLKR;Z<\i,'X<*G.&f#)R`k;CD&?hg<@$)5tiS_%-dD;HgZ_YJAj!cg8f.4.Hd[!EG2l:RDr5^Gl2#eVeE^`B8QYUeb94ZXd^mVb0-W,nqc7u2e#?rLB@7U,NPbRi$SoB7#jD#\9<"Q9%lF_"b-$YMCi*]dRDdd9rYe/h/D5<Vg>-6-rjq:;Q;th^O[J@X'm@(*M*FcB5c#'f(;qZWPD7uEW-iIVLST\i-];LLq<Gt[f=('9h%^(@^p3;!O0l<JZ<De\VUb,LlI@F<;5(KH\R-M\"`pcr:ZO:1>e0MrLd:#i64ItbLA6!JN!*WS/(f(mA*95a_"jT1b`YCq-*hFI)R%7q-af=k'X/hK*SJ.kV9AgO2,T]psjHk!;%@ik*-2`-\BjFM^u?D/bosQa01c_&;O3>ij<KgF4d9Z)O:ZqGn'$ji:Wka&km+GcVI%%5WjP/HL/KXpW._@Y1p>%Xj9F\p'g<K<:]B[:S6h)2)*aI9@Slgl`G9b2K@j=_D<9Xpp?0f6V$U801KmuSUN!uP(3C5@AU(`es4P,%n*]T?XV>W$CTZ3;C\:m\QeO^MKrhXB05im%%G6*?N:\I->-0lj<fan\>rl(KE'(a[qs2p'6?ti^?D35deF"QQ^K=k!H5.TPcO#SV%#seIk8Q7ZM/['7T[jE_E4n;f!F0VoRq>O)Zf8hi)>TVIYSCk[p':bFCmo[]nq_Zs??`?d\\RZTpNUFTe/+`Wk*ul](QO[2NLUkt$%__/?G_*Ygl=,uo&7Q.:/Rpa<tPD2!q7d&#Q*r.fm/a4'q^trYoK6@k;cMLbna8uaa?XJn7kgaG&_T)i#F86S2"3!>%I^?f.mCgi.%bNM"c[iL%PQ=h2AZh]hK=t=fP^/(EU?L7hAN]t6X\XYVLNN3RdJ!V%3L>9E)A]P<@omh]ZZ3+(7HSl;3PW0-u4qS&5M8KGtol_+,%-dGC9kCFaukKOO_?,<Y8hgCr`02J\c\_8HW`mnG4`t3/Tb8l0sI*]ugHRmF,qtB'.EIMrt0J]X)G/Q2`J?K?[A2iA^F9\uFF6dJ@%!r,&oCVr\m6(oEO<M*S>SQ,S.\pQ<g"gPbLOHsd<N.oc!o?(2Xnb=*";mbEW9_oHReGA8Dij8@sG2IeIPIuNK(K.LJ2#sUtI;aR*%"\PZ@DD`u<p3UO3/SF*&/tfYqkGQm++6c4$o'us@5O&lC^e=5#lEMS"!dC)B+rI-PopH%1i-cB6P5/E<T#*c[BfQ2j/0L)I`,WF3%.ZgMA8)nmpq9=us)/5]sgb,mB)7>j8'XS_*[WUCF5qZO;@E:UKkC-Z2fCBWmkGd4D,2%CZ8b'+C-bB0kCKjS`]B_M]F9s%PHndYQ%"g["3mSCrPjCES<R)(c++".g68KkjYM5pC[U3[<t;JuYs4O()rEr)p%):Tm>VM2Gu#V0T5asL7ai3;s:6,UE4KEBM0,LBU&4$.U[%7:KBaGSZs<mi1<><EVS,r8TT7J\GL:):Z!Yqls&7F*4cm\@<'1gben;jXQ5[=LI<F%pi.\Icq')i9`DC;Tb=e^=LTLMn7q-JahGf%*g$_[g8T)fb\??^c8)qWHgBn/?@a!>/OX(+)suHlh[@cRRJ5P976o8C+Z[i`5h?IjG<h\J_9pF:$.*YA?4*GS6Gk@ojmUFVqSU/m%C5ZrLo;SkP]6=mj7iMX7p3;S/Sr_]=a9edcGd.??ENSgu,#Xk14*s-CXZU1-B251?^M7@l\X@a#q97mX!Y+[<DtLBFOVh4J]eOtT%2?<_LrH8`QFSTBMa,B\'EZeeeI?:DLfDAdT]Jas;+2t)CnW@jWMpKAGm>p6QY2u#Q[!ho6m+-qbN(n_(K>I0s/8f#oI]aK.AS"k:%T>'-/\.5RXe`Hom;V-i[_tr2iF&(he;A!2[4;&>+55FK2Dl67.*U17SV<aDhW_p::>D8W\'RW]FGh=lm&"e'iQflmhB,$F]c=r0r%h<+IgcYO55*VF4cEolQkOT)\%[u%0LM)Ko9DK_O[X'BA<6"7oTpK>pnCA22nR;[F^EW:sD_;O)Sa#R7qk;_U(^6I^p5=Hq8IB\eE%FPQgNa/O7u8aN^OFUSL6dFh/RB*`4j:tFkK&G>fNT&R;?6?rh7dpApJFS#paYdiruVb:5I#L5iAn<CX]J$4_HmBN"g!lEJjoke2X%8pQl.5F1%>0pqpNp#6&B=`G)cWRlRrn=9UV4J0*C9_(gcLYp5,ldHBb\*iRtlutVQS<%%1d=V&qh&N^95$b1_;STULF7/c_Hf=\/%d*og&'r,U>(f%Y^^&Ud&?[Zl`KPCai74Ii)\p+b(\UI#oP,t=2pTWq>S.sFO*th`oFMZW0g\uACV2.$gpC(m*41AOCkU?n-o2cH!%k*&^-!UfXs@I1lYZGd89DL+LlD.Z#l.j[P]e:a7'05Oa!M;FO!dLm(\[Z8et>B@![T/YYFmL:*07a<`kies_[d1[ml:V(deFe(-D%q_(q61d@SM>j:5XAa+2$fi.>41V$/Xk8^(DKW3aEgh,Fs]!!M"YK\'E=j1atIh9VTG]pF']p/G./me]knk-@Eh30DFbt0thm7$!0%B>/9=,Vc4^_O\U,]N91d@_B+oEAHeVX='!PV]AHGAj4aTX%WMSeW%b(=hlj&?+Jf`ArQ&PXZ+Z36XR=t`)4)e.hj`\+5Jq]W*;b^%OVg6K)R,BI=EW">RbR_#q]o92gADJL@/=]Iep?,4m6?""PNHBlPN&9kE`[)7\B^8?ZIQQeEU`MCMA+H4L4a%GYuT6F`9$jlDWuE]%[EfK4\WemOWdE&]lgoMKecpa[.US7I@St]2)sU75;7)o9gjH"\qi,pqB_CHgR(+]/Db8S@H'[-2Ja)oXP!Wlh#$S*MS1D<ZKA:9#%:-?W>>'iX#VSBI\TB,2Z&u.JhkcJ?tXfU(RMTdY#L&2#mZ3Lh+?I.<Bb'%Ej*4E/.jdhn"IO+iifl&(=j:@(kJgX=Nm8/XfO8q?.%<n#4'W%;e!R$I1ta:^McXNfpp#+GFS*#4S5%ID\cN`H@!WCts$F`H.p'_/.,b!Ys.JfY_($Ua):(S&%Eh!$mj4d_T*AmE'"YGN9)%9D<O[j1R@Nj]3":mt$R[5H^4A,LD_J"KCs3P[!V=Q85(.ieG;:p/OFcel9>++6@o2#<U?8oPaB(;tQXY,rp3jT>^*Yie*F3>%LG+%Qd-Q`d._KTn!u4K7m*`Hc^)<6#KK&s_--5iIJa2+Mr)t/lKroB+T]gSTa<KHNu\1IqO*XNQ&\L1P;hGOGH1d*PJIs>a)!VW[gXYr%SSXsRq0(1!_*jgn9\5;'>taW<c?IO`Hn?4m@D9f7mf#AVmO-H?5Of8*j^!5T<o<bMoL5jpk$g/m;_M^_?Urk@>WU_/7Z(i3`LXJS%U>NWdm8N6'?Z6rR+h(E<eiU^<X5sEqbU(0KBj"(TF.4:<e"o3J84*kbm*hHY;Q=]8?('Brb([7<p7[PD^@@H<3Tb2WTA>;QlUk,T%GWqg8nCQf6^L$;tGA85-Aoo9'("kDRH2bBXBpkN,[8?ft0A@uN)qAORRZ),&<uKBQ+C`Kq8eno^f>JJ(h:9,_0^HmM:+E''QaKgf%`gWK/,H#Y=Fd1r75Tc616R9)\Ikt;0P*`K)`>$f:UKRHW>0lR71oS1?fe#,VlSi1Io\8Va@;IdrkH-oH7a!D`qRLG)i9?X<AY!"M%hMK2Oaom7]P`1Uqfhq$:n*XoqgU@KqocShHc#oU!\Enin?SH\_S['>"1f;p]iF60Yo3S[`&JgN'*)Q@YjlB<4OE.hpT:=>BD_8T(%9;TmT:,kd1gZ_T#rOQr[*%5`<laja8BBkDAQ-AjI_?%ba<,^dfVppO"ofU:P4o>/0r,'rQo;FQSM-6KX^R.H$\,CR6;I\9j)21^e%c[G*T<@_80bgogXL`a[riAWqaFpX/m/"k(#gY(WIm:AAQkP5]mq?3n4`Wk-sH-<^lWp<dk97*Lm63eh!;U+c!l:%r?ZNm"C5gO#6%#No!Qa/YP!lYFGHTXf<c!L)C"ch(3j\FFe^?>soo*QQ999-3\oRmUKhAu69N_0\#F)pbhc\n`"4;sK*CU[A$VmX;7f3WMD)Tlg^c%f[m6aKD8&Ki-+<bIK7LK89N(3-"<t=.`pMdBW<%l*?GjjcVH(59_Blb4mKbk%`keXIahb$5pi0=0D:3Emb6p[e+OpchOUWhE&1"k%]=Y2MZ>?\.T*D4PcX<L0+#_s>2rKC`7VqF!p0R\=SSm8Kh1cOp?*C.$<9(W>@9NKrVn1'V!r$Mf-EOfgWfoNkC"tX-q*sG7QsClE%1ecY'd(d="s00+tlI<tW2L%\=HY>UegE3m<`*7F=W;I=`D_JiCm9BZR^%;.i\KE>R.,X'GQkN9Q`[9Aq,:'2\Uma0-<\Mnlbsfse%nQc`a?.N7B4=qW![[VEB*T>/'CqEj5g4?*[PAN8E>W]6WO_hX4kM#`D]H)Z<]M4](LN/E['Yha:oujSW]K/-pmdDptJ1CjbG(5ie%LRt`@A+t0bG*1EfM>5P2fV./G.U)g$_[a#7m2WaQbHM).4NOf)]*u<&03#YXr`t7!8f0Y1mdDptm$f+Oa6rCOlnG3gcE[8Y$p4+I%ll<XPbHRb(<gmOmG8YRdR$2%SgC-/F,+U*@Nn+<Y4H[pQ8;5X6+!f9[dc_m[5=q[B,aVXo*4&D9o;iYura-r!H.(pCG@AcVOY1&9%B:MNU8Y[LF40q_Yo/mtKrCJ3(-]JUXj^0:]Gu>&5kNfHHV#,)OH^IeWSL9C,,C4j$8EW":a#ehN+Has5Rt,tL+!f9[OQpBFbqtR.%PKO&Dq27X%%nMi8T-Vj15]Yal35\.qYrPT99;M08U[bu]FWt*^cI7^bklS3cAsu9R8YZ[7h>D+6SO`=F7fJ$.3Y1NcG(6rWF<6V9%b7^:q6Lgl!r@6hZ30EW1)/m`UFIke=B=ps082i`mD,uL8*a!.TaikF_4DAoo[EL%]cBC^ff+ONC7fl$/Z'KD&0\8r*Dl6r12[:=Z%Ii$LlI!/9&Xh;78QQQ/%l3"h(puMaq^A<B2"GU01nE[+cls,+HQQN=/p?D`XV&smV_6:%+^q-2cb7B&MotaJE>L;I:^V9OEBIs)P%K3qu6&;`,HI_^."!@Es5jI23iKGe<iNR'K"F0SkYRuP`OK3;fLD)OT0$nFYWO_m!?f*p4cPAISq\Rt'os$;O3-eHS&pA?i'Cj`B'%XCWa3B&dsWS9o=+QYeWEf?DB+qfT@#pft/HN3^^JkF0d[J:=,-2Eo_$\T/J=B&dsW,-fg3RuP`OMp*U(Cj`B'G^M<h2B/9(L1fMP%a>P!0CIW0ahe/Eq!>upKr+iH<ET`KR@PMQ,WqQ:+lla'?Wunb38b&Ef-c/C<IiSBA5?0kh$X-MkAb[BXlU`P26Ma1Ie`]R\&prFk%3k]@3goIiO`Qg]q,W=JLSm3@LUWFqOq[.b\U+63QpBnUmX&Vi$HNa[^,@&`Ks6oq-l,0]Gpn(4C17<P:Dk%QfcZ2lSPG=OGB_bGW%Z_2purdbSMnAc>%rAuJt:SWus>dT*8>t.5B:WTie7n$9HE%3M1)pfoZ'Tpk<9hgG$.RZ^3:@Od2/QtL!e>Od7#sl$=1f;l!jbP>+%#t\&aB[[WX.R5YL91XpG]d3A?dKD>"TF7P]Q=M!XPN2kekosh?A-MsoQ%[5Z'!qoN78mc2d1X#5@36']&S6>b!Q^rRBp3hXKrF2h%3"LMSOKtUr!32Q>eHenX4K!0*?4doR0+F5M_&>]Jrnp3^;H"7AN:9.A/<R`IF3oh1"`&WcUTj(f-YWjOL=<(u$*^B9S3U:h17n^%%'QnsSD%[)+8j&,%4"9Y$)?djhN(_Q,GoCseQ_9<O8XlgO4S/^1.k1NO_t1/:dg8o==#JDK#`=4pM*.F>OTB;!TG3YZ.A>uG:Kh9M%[RGd2;\4e[benN(@T*>-F1NQW2FW?`QP:9%<NqgO&6.:)8WaWJO'k9^+HFM*^lm,V5`.*:/mp92OO,:Z,qXuaHS)436<+_R[-/E(%<i661JmVZ42$(^.SqlJ@WNr&@G^rBJeV$V0J^\&QE^U]$EET'tU$?q<n-b_<oE&,.JcB6q"p(GA/W(h4_IT0B7&kk3n?OT7'gTOZ%.tji8'd-M$&SP8j%4Z733MQ"86:JK%-;>&EO-Yk2Uf&'jJ;4nk:C'('M;85o!Jm0s.'?lA/>>aFe,]#9"d$OcFpmCO"odQc!Wf_1%>:I,bBGG(+U@UX#.OWS;`tjr,n2Za98d+Q.D))?+WIQgs="+?(Eg3L0+K:mJP86I3O@WcA^aKhDN^j:P<L=;:MTD'*Hqo<BOHJ=,%6ZcX)(4Zl[_1Y1<V?"@L8.D/R&dR7O%h0;U9,;ZN]Rk+>35DOLALCc9!<>\VSWZ[6T&ZK1VSbU6W_fA0*0CXjLWkc?"]Buj2B@$6%i(5T_%NniD"2J=ISJHS_LJZg?5^nR*5=EYVmQ0\pfI?q;<hb+Xd=D`Q'aYVCJJ3#e^`q*%0Ek1hq(+5)!LX"e!uu![eO]pVcsa+g%=eu4OgeaYt"$.VCYZ_#WJ5$OLER4n<KjGtjV'@5g:P-Sb+X]j;(/4lT;2IP(IKZXKiV!ok#dQc5JBDgI;ut#DG*WH4i`<#s@Z%B>%+4W?@%7NKt&+I>%p)J`HQ+'0N_k(YB+NR*(<KJRXm%M;V3$<`;BE?LP4Q$iA*4-iF!GUQ]42"&?%AZNl!U7E&hl6`s.HpnkK+]"u%+VG?W!WZnaB359jW=%*)aN#E>$&Km>5SoG^#sEq1!0JRj2F?%=-E6p^((e4,U*-9V4Y+TiW^umpBj@QQ]En/'#Vm]9;<93[,NEQ#%WXELfOn_d7^k,"e%3>WIS<*l8/_H`[^r\!JGQESS(0)(q,)QN]DL6>!IiuR8+9<>e,aX5k#I6q"7#+'d$@ITSTd5m<Q*_t[4t!&B%ii1(aJ4!_&@@*(iTL%'63Qj\@Jr8h"gD&:RR7#LP.0M/a!*GM.;"[@G"EU#b4"fb?74m$Z_!Y0/84_Zh6SK,E-u'Wm:S+paML^$Y%laLsfZjAjf>gs?X'Mf'n7:]pGRTE?K@10)[eAjgU]V^cK<C5tP6#rpTB4Oll9HZ<S[YTV$5c,kR)7:,l6[=PVU8g]Z!k-M`klHhq%:('1>nl4Z*]`@)_KY)gfZ:(N.I%[hs!POWY5h\lP#,"F"("Ekg*0cjd>);H2iM*n&i%^sd$#A1aGT\j](PCuX$k6rV#qFIi4@`q7%aJ3A0.<!?oPu.R@%8B265b\D`L)(ZO(+Q#7&dRG%pjf7m+@lO\!FP(,e"[2'>u,,8V\(4M'G3I*_LaZ++'9gS.R>^a]*_&&.AF/R%79,.[&qNq;Sid5XlaR_gG)ZTLL%?`98OQs''ePSGq_Ag>M$XQc.)HM1(\!OK(pW=OZ2AI.Z+q!<YgI#sW\g@XE2.,\J"^ZY$n<YW%E-en=1k]45A1CK>\o`dL4.7g9DIFJ;J,iR`<8g*UBE9SD5)5S/7Uh#dCR#7,7&$5L-1WGt5Qo6Z:;j7:P6,]t'%77-'La:.!I\ng%ngG!eiH/`qlY'pGeeWl!"5)RG$Q*Wgp"1Ua=TM4u196!2S;-+'i<!u3+A.KR#'gIna6DY>ckJUIAcXCfP5k_Q<!O8Q*/Hf,_?hVO%<Qh1+MoD"2.afVZZm$nHQ$'ruG]S9IqoH]>7bU]RC?]E]ikRGeECf4jcl@ZR74&RrI+O1A<%3_MR)$mY'd?QiQTtR5JQL4j:sk^8%DF:\Q'."%48I@0qaArn)!]Z;a'I&IVhLVh/:r3=:DurNAcJreSJ6"5'!J1>K"sDD??ipGXd?4QRX.XkA>7XmQQpUq?8/@#0^rI%D%Bs&u)g4H/O.101DJ;%Q+_&:W)#GDW$&1(kDUS/g[Fd]=378"^JTEIeSd/pZUlqFL$oS=2t6/*Ia0?R6cP,M\ROXR!c"dp^1?35ic%)'qWXTM7hAd4/3g+(-so>-5TSOq-'CKX:uI',r@@?r4Yu1j9>[7Qe(^SMl.+-_4f/IYkQhW^LIJOImf&o5q3TaCCm/'_kUY04h?h%ai<SN%'GJ(fiuNn86m@<5n4JiJI;\1!h=dSj3`e#X]3Yt_A9A5,_A\+d+AC\MGPe0l/;'Y2W,)/"nnXed-"45+pH?d_fWipTo[#:%;OA0N#O!I:IMa1Blp,AQAZ\jd!5mkPQ"gtK"()gV"3gkd&%$lcV.0mJIIP^AX(:f*;Bsn\&eHTB5NkMr4aKn[>X/U7Ysq7loqY#Z%*;,i,8]!Z%G4=1hJXE`Vd)_m[Bc!@5$Lhp:!._G5!cf:Y6",GgA?^]CLdTYlWM'fEX<*XY%DkOZndJbtMHXI[.U^C3N(DT&T`PED%WJi>p@Aa0L&:'$(/s;\PJ<Y4\7)tR5g12]"'JrK[Z%K?;eY0N#+]X(VJS`/tWIaV=VUd_Q\WXm.Z4muoH&a6V,>)RZ&hq`JRB@%-%3,q#GXm.*J'3L8C0dJIKAX!^Y;dj!?G;O#jGE9+!$q>?j.82uR]F*+[S:s"*$Q/_J(m*p^2A,j',"$;p:8/X7KHHIP_`A3+TV_ai%M8Ka$#W`)G)n(T:I3M/n,u%Q>WacDAEXYVAC*ZBlZi\&t[LpYOjobdMF<X0s2@/OEOVUn#i'O)fCHY,9JcrdhYq.`]B';@/?p]hV%mK_+=aD"UW!$'Me!4E[t*eD]V!&oce5ao%`'cf2_SKSW_:fYVdN*;DXg</XL!NT$P+N+K=5[-XW"Y>,n*69<J6:K'ef/,>&J_H7-%3&Ek(L$3#<6j>".'C]`;laRctViJ)QXCoJS!:0nPKr72oK?-I%'8n%Jd=?U0J86Ep"5Bc,_LOPMjb/W0H\;huZOJf4U];11+rd46%L),fT-FOLb%bb?7!)8Yo2$[0?5l<8Za*;@,J?MU(7@*2`@0B3`YRFPJ.2eh^-Q3fV8B\FBM54%=?,K3n5a41L$.rq`!/XMu:4n(W%3=9DigAWRaNSnLOR44HD/c]OH()/m,"W@)BU_gGA5c=s?L-qZnAJrm+_m"jH&8p"H$H3$^2"?:Hp(]E[6JQlnVf;sQ-g3=\j<8LJ%'Fs?*C3HBT#/rPIaAHo6d'ABpal"4+$Q<9gj0c6Y4ssN2'FA1Jap&Z=C2jkci6e/$q1?[QCR"0'4=6`IMubH5ZW%VlR\8(W$ucWt%>2J(eOY;;JV[8Y3Jee>rMqU<<Gc2Nq3*-K6\3t,Dg&TYCni3(9,!&X>o#!\2C_[,c#_]2J`012^_Y3L:MZkAH*6s=%NR9@R8*:B`%8,jU#'MbEh0g6s`Fqm$fSkl#fKZK!,!"/E-kTBF034)LNJk_h?/0Z`F1DVNKQj(T^QY7qfBb@j@E5H<fW0REB&+"Z8#sd2X^'2VJ%UHl=@A-E5c:ZGq%O$Qd%E"h>f*XF<N-gLq6&IB3AK"VI'l4"/LOB!J[l#*5D,jBEkM8(BA_%g?u@PRss#j<7BaPsGu!f>5':Q\I+%50']0OG3rlR2lC\.)\R(rcCehh1SJIUR&l!ONg3G_Pq(JaI#$R%-Sq!5UN4+^q^=T;./`Z8IOrB.P`]N1l>K_B&Zk_]PQPmKVcHp%"g]9s05QXu'+lUmaG/8Y&`Zq<k[QQmPZVo2&m$5W,DX4_POQ1Re@HpKoI8JArfST"GdOD\OVi`i3;d;g8QZ]B'9?!iHjl7RY389M%8OPB:@1f\A,#0YG-"nGC$^ta:,8!e4jFd(TObbQg#/N3]8Us3j#W[]3*uKYXc8j^/T%Bt?UN*em@!Fs^<YG8$0G%WDfUlQ-M]1]$%E=f)R$'-884"7\i(q\oiUfe9u*`)Y5dh)oj*"pC<cN._mYlm-5d*WS&--rP-'?9jaD'5km/b+[7?rcf/5)ECI.#LkC@LK)R["TJK%d+*\S+;!!2/.@q%]HU;G(,Qmp$F*)d7gM/`"e^^9aki`%8dJM,Pq(u,:pKF(J6Sn(12'%H7!c`d9r/m9m$_NX(GmaQh7sbYP6?hm%rkE<@c*$0JFbQIG^-b[),QS=8otr6h'?(h,8-X&H%g>C@!jlK*Fun")VnR'amlbN!-LEuZLFcKnT=*8,[pH?K6;*r[B.WK!'j9R=%%9Nbi<>%1@8RR7nX+q0K)-16-TlkIeDXR6,;V@qp@T`5`J0e<J_N8q4`dl#[09UpEP:@2.PJ"7&;Q#m#d;\LJ-6so.9u-+c0&Qb'%rs<+$/jM_5gh23W0['qoFPm]9a+69h*;U/uRikm-fW9G_3YD[s-:u'sEe;k84:.`4"^9Rl]?]c4<E[Xp`PM3bckQ5J(Bs-LFuo')%9TU9DdCGQur%%T`H59`o!#2\Wm@pujLXk_%9.VY$"XRtlHc>;oNo'DFo.ile:k$(9<Lt!Y\HD'3jjQnmpscH9V>NMm458THGie)'%:oAhSi)j%B_EI7[N$OWpfsa3^L$<(D>VB=8+T?*mU)tI(dc,oS_:K)N?E2J^Z2F:3P'#u>T$+9E,^?DBlf+cPX+ejP3qBeE6D%`I%FJh;?']i6\OE\RmmD,tW[$#4ifpAmIPte^4i2omT;Uc0,Ft@RXSu#]8HC3.Fd`Ag!P0A+VQajb0E*qbZK%`7Q2V8^.iZ)8Nl!b;'%Rk9X6?)>ZIR[B?$38.l$98i#@"o<[1C`rF&_/6&(a3LO517=+$Z?i4Aq7HZP4$W](gK6sC`e^*eM)M1>eBrD8j&:b#^Fj_s@\6/M%a4UX"XP17HA*;3XN9:3HG*A0%&cb;G"7+/OA0,!"FA),>M7/:N^"/nf0YmR2(UsE_*fE=_$^u]d4EAa_>&I169VTrr9/g_g.RYi/%f:7M">L/eB4O'O@Vt=E0XG-WK%;nm<_]T5M0NN%bYAuc4pZih&Smlb5N309iHY=.=VgDU_C5'[gKl$[fY9J0qRo&.LpeU4eGEa0:%OWBM%/=XL/GJLbAJAnhY05QWjeaec;AEY2h$$]*X2Crk0bApqGjt[[\coT[B0j4S5Em2QAb;d,"IJ3Rg8b:MbAED!kqTp25*D8I9%bb=8CZr&`LYhZYI2J54\6LiDFon[20O_%n.Wh_mgPM"1P*k4?a_o:ugIIBieMqP'aq'obN=F6)iaq[1E0HcV8]Bu/i`ch7)gEps]%at7dVXUJV4c;0YCA[sJ#mStf.J\W3_p97UlpXo^eX>e?5bC*=]eM+f^V=iL?00<p>=mA^G"^3ZHlQO6$$+b*XgLZ10*8hm-a%#nD%-k3?`%O'C#Pt/p(LXLCCW#VT>W?kZE<FsBUb?FD#)a7fl@iOb.nu3h_8.)^U%2)S.+>-J0OIo(mFlqG2[Ski8bCsFd5\16plYsBn%ELde<,Vc%4=;#a,/D%K)T3[*b[rrhKHs%]hAYT;PmGng/Gp'.jRj*dBpYf=7K0,C7`ai[3/)bobr[9Yl*:(1[e?T\W#&IZ^,X1$e%(_UkU@26:nDlEHWPs_\+F1Mn6OkM\1.SN"f8JY&4pnR6TRkMfOrS_J$fERGsAY5Tc)XINtlg"=+Tpgi>mLDlpm9'Mu&)=dpo0fL_%S]J??1cWpQm<UqZnp(ED(sATW?9SD+pO+*KS!m@b1_<uDiZ0/g;a6/G'IdC3CJtlI]VQV+T#pI+/l.f"B%*0s86GI3UjBc<dCT,g%Ujs`iLB2+M$0$^HBEXY.'KX,,AD,<6!IMZ+oZIka+R,RrJojik0KKpc`8AZ/"8E`(#H5Y*L8Q-_U9R:dZeq)'BGRE+OMi@E2!M'0%l_$!W@3Ufk1%->1QQ%V/>d[_U"=u(X2\fK#2a"]].'h`qEpA9,-ehhuR).2NT#qZ7iWPT46:E3r>as]H#%F-(@T9ED&,$g?H\/N(%oFME2^0-&j8]+@VY*<So>(RH]W$s<d[)C?CcdSsh\ek$=<0403D-#IM^R2[\dbJS[VOlgpmQ8tRZ3?o\]A^<1o5aG3\0jW;4A4$3%/;e)M%VQs`&d!oQP]b*S9E[!6fW=^kXkb!j&+PSF+IC,L#Gq1B6i(S4,^Y%EEl*4Qe>MdW$<<^F;m>XK2in8<#Y.Ep'Y2+U+aGF!%W>hgBeO2:Qgjl[)g(W2%SbI"N"O,sW^Nn;ZC)AG$V9cE_pOOP_C2L]`R/0hpo5X6;CYZ`3A=kT-bt/i0VJA>NJoJ.)`P$'0PrPt/%Y7nUYHA47,&a6rl25icU>5gRV,hkFP2<!$\Q28Q'rs''5nipB@\sDGu9k86q]e9>t?:\a*C*0F9*=Lb1*ebT";MjDRRDgnR'X\C^%@,SUX)E(pBD$Z=,\5GrU#'"$@,WfPpWBa&;M@_+r5'\2u=IGBG-41iBB2tT[BB"8#AWar$m7=bN&']tunK>mrQQ0ieb@_GmGcYU^%>QA+*e>)G:ca'ufIC8^'`cBnDNPmE_>rT@ch=XPhHq;FIMi?u^-6_="NafN9j;V2$Fm4%?T76V(X<E&ePS*62Xcj(p8bk[2oYVVa%R[K_*4[f09*BlTY4\4<2ENXq]-1FO:gVa7&/F!W,]I9SqY+`(uD'_Hj+^FAijc2b:jm6LbWE5ASN0X%KHtHU"kERGsSkkb-BrO+2%&;@#K9p@3NrikMKQ>O<sOG.ZdK>`%P7@7eg&[e_jBJ/Tg?MCt8l7?4_LtjX\s5Iu)Vjc?'gTGle!h6U5<9f8Jc#R@fh-A!c8k\T%%-5Srqa)Qu'JCq6AX2ng/a'<`fZGTn//#sR8&-\HuKc"<5)#u]%NtLf,O;F5Mn1>!'WLIO4#:b*?XbAdt>W0ak(X'FPil+B9c+.LR%6dM(p*T:0%97WuQ^I(:CNid>j36gctPobHm(eFrm+JGR0EU5;M!W<n8i0O9";s-Nuc"LbpJa0=@8_]8=f>[pkYm/][+L2:-!!?;o%^D7IpJfOJ1HE-ibk_R6<,Lua#1#d(hjHc,^dS6fM$$s8Vr_\[3B\"e7V/$4VKa&L^+P3rq;G`Y%n""`b<0cWO5Kp$C$`YFRpU`^g%BRJjPC$X"<RUFce1B;,BQ6UcdIdFsQntB!a!B=Y_VX5J6F/N^LRT0n;5t&q!oW9C@V2W.W.4]Am!T('MZto-#?tJg,^OG*7)2L`O%,SF3]ALu56Z;[B6fp3DA?EW%k)PJ.:aFZCH261>sNC+MLq^+OO,^Hmjofg,r:VbA$?[6RPj\2>nQ=Ks&a*`r3a,&UKJN82+'Jf+5%Sf*I]Z:H>1j,9NbY9;T*84EU&JhC,5m]I_+CjcF;g+4,&Q3p*>[Ip4qc2[OW^l)IS.^f`J_2An0rVT_TP&*'@5@`nHjMk5f:[NAm%6@eF1^QZS]&]^2a;n/=CIcGRu=fb?R.#C1Sh7!*TLG72hiMHag"eq<t=:%^.@b_),g=7XY!=@gn8,n6KbCkIK?0g@PoE7!r_uW"t%XD1??76YiAkoK;*=JA&*=T\>S1QC[erJ00K-,gI"&G9W7#&!9\KtgPn7/JPG,0WcYaeqlO1-duY0Gqpm09d]0595QFjj<S"qQ`Yl%d1N%L`KMSY,"/8c!FM/)`"q5so78>"b-R\An^ZLOB`R_/@$@P/=.MkZLWg95eO*Ih1)%J(C][L"Y-p'bRN"SreorZAOaqn>l9!ir%Kf=%$iI>hX+BWa"bIp7S2O,X?-,"Pp;1bf!s)=l]+P8?$;r[g[_Q.19If$[$-k$)p8;OHqN=X4DN1*%lchjW]rIp2]BBk@?*S!H+%V>D]AZ0_cc`P6Ep/7r29Hse@nL'$-^3W3-]l#kTQPh@E7rqWO$$HN9]^KrLYWGL)1#;lM>8-E1$meL;e\+Q^^Pq]YY05%_@=P5c1%9uagi2V\l]Ht2NP-cr32nAs?'d9CtQH>UCh],\@VaVrN#:mDpRiB&tk,][.^bqan(ae5dqRN(bJXsdD_m!@lqCTH*$lOZ-_S&To6%Q-=;OQ_?V+T80K;$07O[#3;N>V'*L[MhK$_5?3KRAnr,8\6kYp&Hs%%-PAct$1.RXj9O9k+7a#4391=fAL2K9@YVBTc.[pI^iO_)%E8;E$#+L'C92HiaQ']Nqc_9?QfnmJ'c/K2>#?LV@G*$t#'0=fl&IuEm`a"gt#K-qJ`61nW8S^#t<EqGb=OR<oOi+?0<nE=!]oMF]%Nd/)nZ$&O=T@O+DJLt6Z[:39a:H$)F\d1&^2EG&PMVV*4P!ND&[0>2R,(biLWAVQPRn_>6`tMs>#S@"F?r-P2`o+Fo`1$1>6M=\5%==Em=p3bfpKF81]Rd2S;Rj8l[)CYP)Rl,$"T;u0'"!VdJG];u7+N/b."5#[R?Yj8*3b>".-$^fLAN@51\;TLTX';sO^e'fXE+B?U%53h[7Lf3`c,l=TVfP&[0+;+oUlXVNDN=@\_)"*.<!m*XX+]jIgJM<C4%)9Gt6Ig?LOA)uK7kY_\e<*A,F"b>9<CO&Q0K(p\Ce0:<%N"(c7BYIRk$S?p9Cfb/==OtW[%GXp4^W[o^O`WFH[B9DBklb.W;?mp>N07ZT4F".'pc,F'\';;JoXT*FWXQ'P_d0QHFsVcXjZgXn%8[]R2XaY$IJEAXI_"3?^EaM>+L(/ln)R6A\PU,?UC5QSoHJl3aMp_]E>n>i0VKStUrZc-(+0cq8-_P8fO1'@'[p3S^i1#BfUegjZ%1)h/<f4*7eGhI@Z;J@0+Nb8B#6oc)YnkjcF,FlZ[I.:-QTU/H*8'9GbFlY]ge:J)eoZTAeDT/S=\tte)]["qKoSfUKT5dX>BuS]7%DP^H#I`e<DTfoq]1`/9f*Xm=/=i^*i$aZ"V1W&5Mc8s1U#L^1s'_4%*>82k5o6XuN_QrEj5-CZaBHHj.3hV2%^&K/P#RuVE&k@tI%SK//Iq3k7*R&CJ0S0LeppQjjeZ`1.j+BQ%h`%O&)Jf[_7'])L5RO,$s!2:gQG4BfdiRH\cNCU=El':&sc9L_:*kr$#r'fSd#&*!B%oLuo%^qo%W0q!$@/_#R[e\]t+g)%MOWcUSWj%e3(*_UoF'b>fMn[.)_H8/aMHC"P>Z%k+Fi4cZ7)5/F'/R_W?Z=7bq4tJ`Ipieeq%\bE\Smg,C$eMf&bP4VO+MaF\Sl0<QWZ?;6rpt,/9&H>\'5Iul5!_I\@]hgs#C]Q>p\sjtlLmW-I"!R6`SI9&FOHq[O?JW2K9A[fN%@#0rHV^n.mOVF"%lKOO!%:jd-D+OW2VOp^]S<HA._f>n[-\+?<=O5HfQ^u#B!hkqZAMrtO3/EarbU]trrJ*=/OMRfE^H^$a^8';]%:oQ=-[bZ:UL;]E+]Cd_1'M!HsC/c,CRZSKF'4-&lB,XA%FoD(q_0e#clQ1,j[Edj,8]Z4-Pe4cf8$i8sq@@dP`f("V:(.;R5D%6!%&PPS#?\pE5d\58l#Z`;$s"@GH%8rAeiSs=u8"<@^$EY8H0=&Wb@=:2?Vak)hXB>:IMk$:MM\OWl5r.28KQKG-(Ppo*MQNH4(AFK)%`,a`3;rP8qJYF1"_CU*+Ag46rmRct6^WBeg/WN#s0e5'Q]GO2&Q]eC=LJXH#!ef]^(F]NScU_,&1_/)fQKH*(VM"HDG;]0qR1C;p%I>?a^JH-o94>"rUpVQ?/e-;_Dm1B5nHb2Ze2jX9gcYpt\jqB!l$Gfge9LLP\[:)Xp>8X2uB3@D@\pO.97H(N5^?hO.\VCq>,hYQ@%=IssG9:js/VDbj-<&8+P<+GWi9m!K]`Tu5a?](2!#0T$0&[\o-LsPW<H*=p->c1nVpLG]00emQS?c"Z@"DRZKEqHmqCEC*o#NR0a%^)NpB\[fs$b<$sE@Oi#2af"TKoZ]=!S.rPNP8^jYLA]nZG:0__TB0>rl-_c8MSV.'a9lul'M!-YoQK6J%;CC4@7aWA`C8IKJ!8cs%l=5HH'd0\0!_/VsK\EJ!?T[F@i:t[`,Zhf]%+8A%TE7H<0:'-d"jK4id+)cB]DB5j%lSd&X9+=MBl-:DWUacELhgMPh4DUb8=ajF%i>VH$$Cotd/#@38f9IC:GI"+aM4FNZ@dOLE#dMG7)2'0QNR2i3hKcZ6gJ)"T9$u-P[beHpbcR\C8Rg)9r;Q(6;c/&>C9f\G+H&gF%%^Gg#gP9X:fh99b@]9s!<A1+rqIOVk:fX>L_g:q^/[WC?,J(24q:P8Y`[ML>lg2O^>:\kCQMV*K5c5+r+[mfA+H9[D5*d1]X[UT$%N;MDUC4Zbr\P(+c3IMIGhe2c-1/][aZIhDr#S2<n$klqq8OIdcN)]djhr[4hatnj[E8r?)E3T`TKM<;.+sNB)nBE-Ad;+R"X?$g2%Q0K6)B_8YqeWq#TVRUM@*3"NAAB]Eu3*0oG_h2c`2)h"sXc@m/F["6fe<l.:`Gm/[=P:V5m8^El5Q=bB7T`h,L3&kf'"s!VcauVf%Zho@i;^NbEmO#]KR/beJ.DOXc?Se6QV<^1Yh+l]7deQPjk;NT/*97qWLMtj<iuEEHPG!&g8)7X[%SIUEdInA_D*K,O:iRQB3P&lb%fDu7Hk;1&<j9o>L`lOARk?rCZ.f8/eodRO6"ZF'NXmJjoDIGP]oW7Yu!VEWreZbFdc=&%OVg4G3q%`VT,*Qs^fZSSW=&(mjhM]\M%MB'=c]/?mW<?4Il3DNi7LS\Ou%bHh6ZE""nDIE#jK2H$UYQ/%eYUSVN(4*DOHluZTF@edL_IgM*0/LM%0O:YUmN_Z3<Ih&e$b?ok%7Zu<flBrGU03lVc:WaZCV5i-6X@.+Z(*Qp6QY[?dhP'%U^-hipI>Td^,utA2S[30rK:LPBT?V*j0oNt#(=:uo-R'5R!c5:h&Nf%0%f/Zg/"WSD/.f%_=OAgM2+A\fiqBjfchCtgY.d-E(X_hVYQ@$ei,H_"OHOd7iT'uNuf(*,82EX^Yh8?V"06B17\%Wa$IQ3*MRnOC>%$6H80aj;'9nakLBg%LU&G&DtuK'm.%cT>ZP^:g!_SX]WKS%?rT4]Q"LeMX);1W@UJV:GlG-h(ZOk#;P/D&&HMiLQdAVI=4DCe-ZE%FlLs4^`JtHN^/9?g@Kj`[cKmIJGu&I&k(aJF1T>%O1:_+*o3*>7*TiujhPo4"VU=(A@H4$_>S%O3D$./Wk]fT>W=GHcp`3fn0\*V%e"K^5-q!9VG.O1H^]\9TS0^jC6uK["6[/H!+N3fTV&p91S`<42:R]D[WjP[9<"nX3H%ko._p>,Tl.Q;lTM'0>Xa<ia+jgDhXYUVg%7_0A>jjc+D74Fi^a=/;XgC9&oK4]sK33A(r0291PC92Wl9ofMS.uX@_\a8,fJXjLDYa=d"T;n,cjs0!3)`[On+`-TX#:edSQ_u4X%A0$TeSBGY>ii9fDBA;>bpT;XPb=n,`9UkHVb.5RY"FM!*(_ObIjbXd]XJJYArP`n%>$@(\XV[B.C2@%rg:UBcpGeG\fV;I^S1:IO%nR+1'Y0D4'!Eo\g3G^"'1T:XU9PN_s*$r<9!.H(=5dLc?>XmPI-',*76nFgnD*AA4'+B7NWZu\n$(j+;*hf!J/p"m`0hC9I#VV9I%&p^,00:ZNp7Ucr!Ne`(-WkDUL;--@G?9_H!>=8[;?LddOfJ@[:ArF..ODFX(C4n'r:F4=;#=hjmQ)U'?M]I"Ap33>5Tu.;p^=$%P%je3X;9%J*\?kNM5Uu$I`Sm8%3I[K;KA_aV@=M?R5WjnLY%rI$5P=,nnESl=I9BLsgfkG=MP^OS%3oZ_XgAT)l,'c4\`208G511TA%=a7=d[@;G/P1P/$RHhI)/SYd&bpQB?F9R/8B*P_.oWk=)<VWk3>TknbE3a!^@s=8C?;c--T[&kG0lZ.-m<;5iRaL[`8GIPHT/K<I%'2p5/a.s3[R0Ai4U[qJo,KX#IXW6nG65Yc8eoK=<.r"@k@\9'HNJU:+h#!J%W:63:g)[)E&L0k<,q,1P1_LgTfrBNK(3R'(Vd4:'%S<-L*Fh=HXio-<9Ui;S530P-jm(b%sPb]&hlR_k2bmY_<rQ('?e7LAB.l6fs/XHoaUs=)sOD;f0au+Lh%:qLpJX>"AF8SOffsWSr%D,Mr6OLZs0]X^'Ld:8t6*gXkZ6n8/P,aB(_fs@_?9JdbNF.1eE((I5Po1`I7Htb`"'<C"VX;/<R7qPt^2.<c=b^#)Pj>/^MY06tb%^o:%U<tZ%tJjrHLS#JTMh<D3+f&O>%\&0bl7D\WP>:+$T;6pu#?YYll@.Ys1,O+#NT7$@_f-Uc!/.^nqB)2&Q?eMUSL*,XpCoO"U%ml]!^EICJA5/1>/W2hiK_r;Ml9(N"iXlWT]4\AI0=pHX'&K@iZc!dKRZrDge7lC*^?Z=jhXc^'.\YkPILh<(,h7VC1p;tGG9#e!k%eWMV]0#&#C^k!qn@Et6^PVJSROn:$1hB*bl6;p0'#E0foims;G6!jm"i(8qb_oj#I`$>#oOZh5!6CF$Q:C]h/#_Y`:Q6.HsYb7jj%A`jL=Zcg3'fUU('[es+Xbo/X5_UOt;4Eo4pr*j@Zg[6B@frXA&QCg#8AW*qL1M%2cW>a;&Ap%pu)`:415+J8L7T"c9%qO`Z1'jF#%r_gs.f/0J<Ish75B-?JZ7-6-bbHBthM4PAQB2:n^&'MDu*Kr@&_[sPQ^cO>nj$"mIS^^N?4a#0)g,VYZUN!>F\mj5@o2/(>40`s)%Eu^T:di#aW81Xfc/(bl>3AVi0))P^OVoI$O*"K;5#*u((rJ6uPP7e^CD%!Zb);A$B]f.3&_"#4s6eMQDq<hb=N&BS9?0*Zd"[E3&%0]?/n*];6>,9aI!K$ep.K3N3c)B!dD16@Sf(*dEk**9us`7CH/445I?V3C1bf@#&s]7XJGUD&>eB7).,>t@>b9,Y%V-LJ(keq#,'%NlMnt@9K#<9PU#i$saaQ!pL>8T/V/S>K%VcS,epKUcgJ^CpT&RP/?gr4F-_N=el1I*h]=u#u$_CO`s3:)<tneJ8TU-rP;reL&"E>%&7a`H&?gbm0a&^eI8;_t74!JJ68ETugDo0HCg1O>gE-lZ\o4l3Ms2HT=`1O,^L>T&nSG=`Ud\PGM,hO"5*0OT0de0:d;5g,B.;BW%K4bSNpV*=l`s<+Xi\%b4)k9,lo:f9^R+>#f+7mY,)b@`d<Z-*BpP2kD,:Rq;Fq`;$+C\>MgD`3]^bhP@\l+:m*NB.%P:G\S;k-mf%E@e[tp9$E;r"p:^Vr/%Heh`\[dkdOD8(sIcfa^DI6nI:L#1nt]p)'_<er^03Ens>il0`Z-&aW^dM5;3(0@.T-4"mp>Et/u1C06L>%8'a&4[&.1.g/G4nBif/Wqp_"Sb!3Ypc87o]7gk-l<Xlh"4:Zm[$A3eE"025<gTB+SAjWZXFelq@J>g7k#<(8V-Mt$,aJ[=3U0*a%%TK>_eB1$8Zj,DiM,qf)-WjZ<?cuer_[C.3n+rdEN04u86gBAsX&]l#Ydm:+CT[6$_;<bNe7rX^hr1<=pdcH%0TGQ.P3=)&j@*O+#%+U4*g/^B1#22uuBZNGX#6cJH'j`ec`9@%E&nQE$,T(\7-6]\fVA]N>=,c3Y0jUSE#RgV=;T=0S."Ya,;[G)*Ko#7T`c@:u0dR+`)%oObNa\(-mq-3lhs"KR;5`-0Lk`PCs$LfLbA;[=>DE0$`@hXXeo&]hXiT9Pm5cTOhZ`R9D*Y)Pm]KqUhhW[V:;GFu@d0J\`n/T=Ek%r5I,]Mh>#XFa=hOnJ(d8N+B,/pReB0kk<,i;-sXKHLFP5P6].CJPbQ':ekP9mn$S7koO%KAtqGokDCHA2&_G;0[i&2AWuG-B'49_%rljZ\$EaLQR.S;5KWO4V?,#'.`mF9NBq!%AqI9/+'-#_>U@W*dS'i*DkiG/fAFtfAN`oiJV)D3\@_'fh_TXuV[-s,GA.W<ZoQ20u%'JT_2R.eaZK^?[e0JI_%9_UNiOf`X82IeO[m"[(L)N-GlbfCJO]<gr@VoEgT+a$b.C9HKl.[c?F8BY,LZc.nD]<m+UEV9p/d./G)%n3>`c>7l*E5Q_,JP[ZW&l3][ngKAf4#U!9!"u@B8/kT;!28faBmL*b#$/[+M$0Ci8V5F!Vle[9l9S1GHWJQnC69gE@DksagfQ*A&%oZE1B7&;8)HdFjKG'9*lRI.nTLJt_RngQn@a`-I&]V;U6bd;#$TeG$JF*$kKrQsF/CQ46okQ(jMEeKCflXd7l]/SYY'XIS7_B:(`%%3_.V(<9*]RWKLpfK9'b!AVc.DE%@uLJ[6nq:*en(^VeE2!ZIr`M:*#%&ls[-^,rD)3n-N6b2VrGO=ql"J2`I&,V!#'6.D<Q%+ep%(U(WOmSY]f7:E(/fb-a1S`;hC4I$?"NTESf2)F4gaCHXj<c/XuM1iLV>TBBXK"DJ+7`b'D#e!+aMW&;B/+/fiGTkp4$3?m^)6prX%8&#D04Bi#;RIkOfVM24[!Hg0I0odl_IE(Z,DfT;%)D_I@O^r[QeLcSVU:Op"0+mYtk3=qngXo)0#8)ZKU<?@!8ZBSA"D5^;NjRt(%fE[<\"?.G`K-dik&bWQA:qk,0,lH0t>">re'Otio>H6^CAi(%/DP5Et<_RkC)_JsB/_mQuF%-4X[eK)ka_NS$@CZqDX'RktaKXGn%nLt#r+tHtG^#^>#>@d+5]%+?ah<CF>(TD('+[rYiXm16520IOH=D[E@@dWKPT1P+U@Qcib*J3G&X_/B/PAD#Ij5+!-8H=&3n]Wf&%P>?>a'lE'(;bs[RSlG?C6SI!glPVRK84idJ1aFL2LF;=&;d42_1*3udc:_`smi\RBfae^kk5<*uA"*>k_hOJ??0/$<.sE+4d\0>K%b93"M&l[H6j7^\&^+GBgD*/6I72iK3T*_2?"!5?4?FhAW7KQspVU"84bK_N9QoXjLB#G<l.9M'"R'F,N1Q_KQH=]Eio_j3F/P0UC%5Fc[7H`cp9'TF1M1fEG\?Wq`a8NX!a$%))lP5MN4LgSV,EFm?IVMbl9_L\+o=LpO:=>&kW/6/t2ETBncjLXX"#(aJZh'ZuV><4CJ%.u56\g/Ns9rs$@\;;aMQ"\V*pI$k?)!Pi(6#CcT/!*mRd4EgV72'-e8H\B%2/+lR5#@Qb>Dtg0Eq:e^FnaCDZVn`8\gFX5Lr,H.]%$ZbVVh?oI'.>$Dn^\tCa+QT/<q!H,0s.A]?g)j[NoXFj^^L$T&+90g)1%jj>^]!G!s75P!^AlfW^A[NHhuE?BLHg:cjnhj2rqPLq%s75Pa^Al[YQVW,+l2*^Fjc;WSs67l0ouI*OZ7^Ddri9E)k+D\<mJd/^IRVN~>%AI9_PrivateDataEnd